<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aloeJun | Lu&#39;s blog</title>
  
  <subtitle>不思量，自难忘</subtitle>
  <link href="https://www.islu.cn/atom.xml" rel="self"/>
  
  <link href="https://www.islu.cn/"/>
  <updated>2023-12-01T13:23:36.948Z</updated>
  <id>https://www.islu.cn/</id>
  
  <author>
    <name>aloeJun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo-阅读页面(微信阅读)</title>
    <link href="https://www.islu.cn/posts/WeRead.html"/>
    <id>https://www.islu.cn/posts/WeRead.html</id>
    <published>2023-11-14T19:46:08.000Z</published>
    <updated>2023-12-01T13:23:36.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WeRead/image-20231114195045170.png" alt="image-20231114195045170"></p><h2 id="生成Token"><a href="#生成Token" class="headerlink" title="生成Token"></a>生成Token</h2><p>进入网站 <a href="https://weread.islu.cn/login.html">登录微信读书 (weread.islu.cn)</a> 扫码登录</p><p>F12打开控制台复制Token</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WeRead/image-20231114200140462.png" alt="image-20231114200140462"></p><h2 id="静态生成网页"><a href="#静态生成网页" class="headerlink" title="静态生成网页"></a>静态生成网页</h2><p>在适当位置创建<code>read.js</code> 文件   我以根目录举例</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WeRead/image-20231114200424550.png" alt="image-20231114200424550"></p><p>粘贴一下代码内容 <code>记得看注释   根据自己的目录文件修改</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myHeaders = <span class="keyword">new</span> <span class="title class_">Headers</span>();</span><br><span class="line">myHeaders.<span class="title function_">append</span>(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;01HF5Z180R39PQ8RXXXXXXXXXX&quot;</span>); <span class="comment">// 此处为你的Token</span></span><br><span class="line">myHeaders.<span class="title function_">append</span>(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;WeRead/7.4.2 (iPhone; iOS 17.1; Scale/3.00)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> requestOptions = &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: myHeaders,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> outputDir = path.<span class="title function_">join</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;source&#x27;</span>, <span class="string">&#x27;_data&#x27;</span>); <span class="comment">// 文件输出目录</span></span><br><span class="line"><span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(outputDir)) &#123;</span><br><span class="line">    fs.<span class="title function_">mkdirSync</span>(outputDir, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> outputPath = path.<span class="title function_">join</span>(outputDir, <span class="string">&#x27;read.json&#x27;</span>); <span class="comment">// 生成文件命名</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://weread.islu.cn/api/shelf/book/list&quot;</span>, requestOptions)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">jsonResult</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Wechat Reading File writteing&#x27;</span>);</span><br><span class="line">        fs.<span class="title function_">writeFile</span>(outputPath, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonResult), <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error writing Wechat Reading file:&#x27;</span>, err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Wechat Reading File written successfully&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Wechat Reading error&#x27;</span>, error));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行 <code>node read.js</code> 获取数据生成的 JSON 文件</p><p>在页面中加入以下代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bookshelf_preview_container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;books&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bookshelf_preview_body&quot;</span>&gt;</span></span><br><span class="line">        &lt;% var books = site.data.read.data.books; %&gt;</span><br><span class="line">        &lt;% for (var i = 0, len = books.length; i &lt; len; i++) &#123; %&gt;</span><br><span class="line">            &lt;% var book = books[i]; %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bookshelf_preview_item&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&lt;%= book.title %&gt;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bookshelf_preview_item_container&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wr_bookCover bookshelf_preview_cover&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;wr_bookCover_img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;书籍封面&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= book.cover %&gt;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wr_bookCover_border&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;wr_bookCover_decor wr_bookCover_gradientDecor wr_bookCover_borderDecor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bookshelf_preview_content&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bookshelf_preview_title&quot;</span>&gt;</span>&lt;%= book.title %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bookshelf_preview_author&quot;</span>&gt;</span>&lt;%= book.author %&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                &lt;% var bookProgress = site.data.read.data.bookProgress; %&gt;</span><br><span class="line">                &lt;% for (var j = 0, len = bookProgress.length; j &lt; len; j++) &#123; %&gt;</span><br><span class="line">                    &lt;% if (bookProgress[j].bookId == book.bookId) &#123; %&gt;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bookshelf_preview_progressBar&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&lt;%= bookProgress[j].progress %&gt;%&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;width: &lt;%= bookProgress[j].progress %&gt;%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    &lt;% &#125; %&gt;</span><br><span class="line">                &lt;% &#125; %&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注：代码仅供参考   请结合自己的代码修改</p></blockquote><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p>改天分享一下我的 Github Action 的yml文件希望能够对大家的自动化有所优化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;效果预览&quot;&gt;&lt;a href=&quot;#效果预览&quot; class=&quot;headerlink&quot; title=&quot;效果预览&quot;&gt;&lt;/a&gt;效果预览&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/media/detail/loading.svg&quot; data-aos=&quot;zoom-in&quot;  data-</summary>
      
    
    
    
    <category term="经验分享" scheme="https://www.islu.cn/categories/experiences/"/>
    
    
    <category term="Hexo" scheme="https://www.islu.cn/tags/Hexo/"/>
    
    <category term="微信阅读" scheme="https://www.islu.cn/tags/%E5%BE%AE%E4%BF%A1%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>备份？看似无用却很重要</title>
    <link href="https://www.islu.cn/posts/EggsInTheSameBasket.html"/>
    <id>https://www.islu.cn/posts/EggsInTheSameBasket.html</id>
    <published>2023-11-13T20:17:32.000Z</published>
    <updated>2023-12-01T13:23:36.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>语雀不久前刚刚崩过了一次，但是这次阿里云的很多服务都崩了，各位有没有被惊吓到</p><h2 id="数据的备份"><a href="#数据的备份" class="headerlink" title="数据的备份"></a>数据的备份</h2><p>我采用的均为云端加本地的方式</p><p>博客——本地+Github+语雀</p><p>手机——本机+阿里云盘+百度云盘</p><p>平板——本机+小米云</p><p>iphone——本机+icloud</p><h2 id="关于博客的备份分享"><a href="#关于博客的备份分享" class="headerlink" title="关于博客的备份分享"></a>关于博客的备份分享</h2><p>有时会使用语雀记录一下，有时会在本地写一些东西，但是如何同步呢</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="EggsInTheSameBasket/image-20231114210939639.png" alt="image-20231114210939639"></p><p>使用Github Action获取语雀的文章并将文章转为markdown文件、图片本地化  都存储到GitHub仓库中</p><p>GitHub Action将生成的静态文件到Github Pages和Vercel中  再使用又拍云的CDN加速</p><p>每次的Github Action运行都是对Github仓库的一次生成，后续会加入对Gitee的同步 如下图</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="EggsInTheSameBasket/image-20231114211235104.png" alt="image-20231114211235104"></p><p>多一个平台备份  多一份保障</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;语雀不久前刚刚崩过了一次，但是这次阿里云的很多服务都崩了，各位有没有被惊吓到&lt;/p&gt;
&lt;h2 id=&quot;数据的备份&quot;&gt;&lt;a href=&quot;#数据</summary>
      
    
    
    
    <category term="值得一看" scheme="https://www.islu.cn/categories/interesting/"/>
    
    
    <category term="文章备份" scheme="https://www.islu.cn/tags/%E6%96%87%E7%AB%A0%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>星火大模型API</title>
    <link href="https://www.islu.cn/posts/XingHuoApi.html"/>
    <id>https://www.islu.cn/posts/XingHuoApi.html</id>
    <published>2023-10-19T21:25:40.000Z</published>
    <updated>2023-12-01T13:23:36.980Z</updated>
    
    <content type="html"><![CDATA[<p>在当今的数字化时代，人工智能（AI）已经成为了我们生活中不可或缺的一部分。科大讯飞作为中国领先的人工智能公司，提供了一系列的AI服务，其中包括讯飞星火。</p><h2 id="讯飞星火简介"><a href="#讯飞星火简介" class="headerlink" title="讯飞星火简介"></a>讯飞星火简介</h2><p>讯飞星火是科大讯飞提供的一项语音识别服务，可以将用户的语音转换为文字。这项服务可以广泛应用于各种场景，如智能家居、语音助手、在线教育等。<a href="https://xinghuo.xfyun.cn/">讯飞星火认知大模型-AI大语言模型-星火大模型-科大讯飞 (xfyun.cn)</a></p><h2 id="Vercel简介"><a href="#Vercel简介" class="headerlink" title="Vercel简介"></a>Vercel简介</h2><p>Vercel是一个基于Git的前端部署平台，可以帮助开发者快速、简单地部署和发布他们的应用。Vercel支持多种前端框架，如React、Vue、Angular等，并且提供了一键部署的功能。<a href="https://vercel.com/">Vercel</a></p><blockquote><p>虽然被墙，但是绑定自定义域名依然可以访问使用</p></blockquote><h2 id="结合使用星火大模型和Vercel的API"><a href="#结合使用星火大模型和Vercel的API" class="headerlink" title="结合使用星火大模型和Vercel的API"></a>结合使用星火大模型和Vercel的API</h2><h3 id="注册并获取API密钥"><a href="#注册并获取API密钥" class="headerlink" title="注册并获取API密钥"></a>注册并获取API密钥</h3><p>首先，你需要在科大讯飞的官网上注册一个账号，并创建一个应用。在创建应用的过程中，你将获得一个API密钥，这个密钥将在后续的操作中用到。</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="XingHuoApi/image-20231019213740103.png" alt="认证信息展示"></p><h3 id="导入Vercel项目"><a href="#导入Vercel项目" class="headerlink" title="导入Vercel项目"></a>导入Vercel项目</h3><p>进入本项目，Fork<a href="https://islu.cn/posts/XingHuoApi.html">本项目</a></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="XingHuoApi/image-20231019224332247.png" alt="Fork"></p><p>在Vercel中导入该仓库</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="XingHuoApi/image-20231019224430772.png" alt="导入仓库"></p><h3 id="编辑环境变量"><a href="#编辑环境变量" class="headerlink" title="编辑环境变量"></a>编辑环境变量</h3><p>进入Seting中找到环境配置</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="XingHuoApi/image-20231019220226622.png" alt="环境变量编辑"></p><p>添加以下环境</p><table><thead><tr><th>环境变量名</th><th>参数值</th></tr></thead><tbody><tr><td>APPID</td><td>APPID</td></tr><tr><td>API_SECRET</td><td>APISecret</td></tr><tr><td>API_KEY</td><td>APIKey</td></tr><tr><td>DOMAIN</td><td>general / generalv2</td></tr></tbody></table><blockquote><p>默认 DOMAIN为星火大模型V1.5版本，如需使用星火大模型V2.0版本记得编辑Vercel环境变量<code>DOMAIN</code>为<code>generalv2</code></p></blockquote><h3 id="完成项目部署"><a href="#完成项目部署" class="headerlink" title="完成项目部署"></a>完成项目部署</h3><p>编辑完环境变量后重新部署项目</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="XingHuoApi/image-20231019224641927.png" alt="重新部署"></p><p>自定义访问域名（由于不可抗因素，需绑定自定义域名才可访问）</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="XingHuoApi/image-20231019224719043.png" alt="绑定域名"></p><p>访问自定义域名输入访问参数进行访问</p><blockquote><p><a href="https://example.com/chat/%7Bcontent%7D">https://example.com/chat/{content}</a></p></blockquote><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="XingHuoApi/image-20231020101151180.png" alt="示例"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在当今的数字化时代，人工智能（AI）已经成为了我们生活中不可或缺的一部分。科大讯飞作为中国领先的人工智能公司，提供了一系列的AI服务，其中包括讯飞星火。&lt;/p&gt;
&lt;h2 id=&quot;讯飞星火简介&quot;&gt;&lt;a href=&quot;#讯飞星火简介&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="值得一看" scheme="https://www.islu.cn/categories/interesting/"/>
    
    
    <category term="星火大模型" scheme="https://www.islu.cn/tags/%E6%98%9F%E7%81%AB%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="Vercel" scheme="https://www.islu.cn/tags/Vercel/"/>
    
  </entry>
  
  <entry>
    <title>Typora增强插件</title>
    <link href="https://www.islu.cn/posts/CreateTyporaScript.html"/>
    <id>https://www.islu.cn/posts/CreateTyporaScript.html</id>
    <published>2023-09-04T12:41:15.000Z</published>
    <updated>2023-12-01T13:23:36.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h2><p>先贴上插件<a href="https://github.com/obgnail/typora_plugin">Github地址</a></p><p>目前支持的功能：</p><table><thead><tr><th>序号</th><th>文件名</th><th>功能</th></tr></thead><tbody><tr><td>1</td><td>window_tab</td><td>标签页管理</td></tr><tr><td>2</td><td>search_multi</td><td>全局多关键字搜索</td></tr><tr><td>3</td><td>multi_highlighter</td><td>多关键字高亮</td></tr><tr><td>4</td><td>collapse_paragraph</td><td>章节折叠</td></tr><tr><td>5</td><td>md_padding</td><td>中英文混排优化</td></tr><tr><td>6</td><td>templater</td><td>文件模板</td></tr><tr><td>7</td><td>resource_operation</td><td>一键清除无用图片，生成报告</td></tr><tr><td>8</td><td>fence_enhance</td><td>一键复制代码，折叠代码</td></tr><tr><td>9</td><td>commander</td><td>命令行环境</td></tr><tr><td>10</td><td>mindmap</td><td>根据文档大纲一键生成思维导图</td></tr><tr><td>11</td><td>toolbar</td><td>多功能搜索栏</td></tr><tr><td>12</td><td>right_click_menu</td><td>右键菜单统一管理、调用插件</td></tr><tr><td>13</td><td>markmap</td><td>提供 markmap 组件支持</td></tr><tr><td>14</td><td>echarts</td><td>提供 echarts 组件支持</td></tr><tr><td>15</td><td>chart</td><td>提供 chartjs 组件支持</td></tr><tr><td>16</td><td>calendar</td><td>提供 tui.calendar 组件支持</td></tr><tr><td>17</td><td>callouts</td><td>提供 callouts 支持</td></tr><tr><td>18</td><td>read_only</td><td>只读模式</td></tr><tr><td>19</td><td>blur</td><td>模糊模式</td></tr><tr><td>20</td><td>kanban</td><td>看板</td></tr><tr><td>21</td><td>timeline</td><td>时间线</td></tr><tr><td>22</td><td>file_counter</td><td>显示目录下的文件数</td></tr><tr><td>23</td><td>outline</td><td>以表格、图片、代码块形式的大纲</td></tr><tr><td>24</td><td>auto_number</td><td>章节、表格、图片、代码块等自动编号</td></tr><tr><td>25</td><td>chinese_symbol_auto_pairer</td><td>中文符号自动补全</td></tr><tr><td>26</td><td>datatables</td><td>表格增强（搜索、过滤、分页、排序等）</td></tr><tr><td>27</td><td>resize_table</td><td>调整表格行高列宽</td></tr><tr><td>28</td><td>resize_image</td><td>调整图片显示大小</td></tr><tr><td>29</td><td>export_enhance</td><td>导出 html 时避免图片丢失</td></tr><tr><td>30</td><td>go_top</td><td>一键到文章顶部、底部</td></tr><tr><td>31</td><td>truncate_text</td><td>暂时隐藏内容，提高大文件渲染性能</td></tr><tr><td>32</td><td>markdown_lint</td><td>markdown 格式规范检测</td></tr><tr><td>33</td><td>plugin_updater</td><td>一键升级插件</td></tr><tr><td>34</td><td>extract_range_to_new_file</td><td>提取选区文字到新文件</td></tr><tr><td>35</td><td>full_path_copy</td><td>复制标题路径</td></tr><tr><td>36</td><td>auto_trailing_white_space</td><td>自动添加结尾空格</td></tr><tr><td>37</td><td>open_in_total_commander</td><td>在 total commander 打开</td></tr><tr><td>38</td><td>mermaid_replace</td><td>替换 mermaid 组件</td></tr><tr><td>38</td><td>custom</td><td>用户自定义命令（高级）</td></tr><tr><td>40</td><td>hotkey_hub</td><td>快捷键注册中心（高级）</td></tr><tr><td>41</td><td>old_window_tab</td><td>标签页管理（已废弃）</td></tr></tbody></table><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><p><a href="https://github.com/obgnail/typora_plugin/archive/refs/tags/1.5.9.zip">原作者下载链接</a></p><p><a href="">阿里云分享链接</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>进入 Typora 安装路径，找到包含 <code>window.html</code> 的文件夹 A（一般是 <code>Typora/resources/window.html</code> 或者 <code>Typora/resources/app/window.html</code>，推荐使用 everything 找一下）</li><li>打开文件夹 A，将源码的 plugin 文件夹粘贴进该文件夹下。</li><li>打开文件 <code>A/window.html</code>。搜索文件内容 <code>&lt;script src=&quot;./app/window/frame.js&quot; defer=&quot;defer&quot;&gt;&lt;/script&gt;</code> 或者 <code>&lt;script src=&quot;./appsrc/window/frame.js&quot; defer=&quot;defer&quot;&gt;&lt;/script&gt;</code>，并在 <strong>后面</strong> 加入 <code>&lt;script src=&quot;./plugin/index.js&quot; defer=&quot;defer&quot;&gt;&lt;/script&gt;</code>。保存。</li><li>验证：重启 Typora，在正文区域点击鼠标右键，弹出右键菜单栏，如果能看到 <code>常用插件</code> 栏目，说明一切顺利</li></ol><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="CreateTyporaScript/image-20231014130634028.png" alt="image-20231014130634028"></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="CreateTyporaScript/image-20231014130838102.png" alt="image-20231014130838102"></p><p>重启Typora 出现下面的标签栏即为安装成功</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="CreateTyporaScript/image-20231014130954275.png" alt="image-20231014130954275"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;插件介绍&quot;&gt;&lt;a href=&quot;#插件介绍&quot; class=&quot;headerlink&quot; title=&quot;插件介绍&quot;&gt;&lt;/a&gt;插件介绍&lt;/h2&gt;&lt;p&gt;先贴上插件&lt;a href=&quot;https://github.com/obgnail/typora_plugin&quot;&gt;Github</summary>
      
    
    
    
    <category term="资源推荐" scheme="https://www.islu.cn/categories/recommend/"/>
    
    
    <category term="Typora" scheme="https://www.islu.cn/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>Hyper-V配置固定IP</title>
    <link href="https://www.islu.cn/posts/Hyper-VConfigStaticIP.html"/>
    <id>https://www.islu.cn/posts/Hyper-VConfigStaticIP.html</id>
    <published>2023-06-28T10:32:27.000Z</published>
    <updated>2023-12-01T13:23:36.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>开启有线连接</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Hyper-VConfigStaticIP/image-20231014122046230.png" alt="image-20231014122046230"></p><p>点击有线设置</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Hyper-VConfigStaticIP/image-20231014122213971.png" alt="image-20231014122213971"></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Hyper-VConfigStaticIP/image-20231014122340545.png" alt="image-20231014122340545"></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Hyper-VConfigStaticIP/image-20231014122727396.png" alt="image-20231014122727396"></p><blockquote><p>应用后记得重启哦 ~</p></blockquote><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Hyper-VConfigStaticIP/image-20231014161644707.png" alt="image-20231014161644707"></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Hyper-VConfigStaticIP/image-20231014161723559.png" alt="image-20231014161723559"></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Hyper-VConfigStaticIP/image-20231014161747995.png" alt="image-20231014161747995"></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Hyper-VConfigStaticIP/image-20231014161821040.png" alt="image-20231014161821040"></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Hyper-VConfigStaticIP/image-20231014161839048.png" alt="image-20231014161839048"></p><blockquote><p>重启虚拟机</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;方式一&quot;&gt;&lt;a href=&quot;#方式一&quot; class=&quot;headerlink&quot; title=&quot;方式一&quot;&gt;&lt;/a&gt;方式一&lt;/h2&gt;&lt;p&gt;开启有线连接&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/detail/loading.svg&quot; data-aos=&quot;zoom-</summary>
      
    
    
    
    <category term="经验分享" scheme="https://www.islu.cn/categories/experiences/"/>
    
    
    <category term="Hyper-V配置IP" scheme="https://www.islu.cn/tags/Hyper-V%E9%85%8D%E7%BD%AEIP/"/>
    
    <category term="Linux" scheme="https://www.islu.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Virtual Machine Boot Summary解决</title>
    <link href="https://www.islu.cn/posts/Hyper-VRestart.html"/>
    <id>https://www.islu.cn/posts/Hyper-VRestart.html</id>
    <published>2023-06-24T08:18:34.000Z</published>
    <updated>2023-12-01T13:23:36.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报错截图"><a href="#报错截图" class="headerlink" title="报错截图"></a>报错截图</h2><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Hyper-VRestart/image-20231014100016475.png" alt="image-20231014100016475"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>首先关闭虚拟机</p></li><li><p>打开设置–&gt;点击安全–&gt;取消勾选(如下图)</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Hyper-VRestart/image-20231014100454865.png" alt="image-20231014100454865"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;报错截图&quot;&gt;&lt;a href=&quot;#报错截图&quot; class=&quot;headerlink&quot; title=&quot;报错截图&quot;&gt;&lt;/a&gt;报错截图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/media/detail/loading.svg&quot; data-aos=&quot;zoom-in&quot;  data-</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.islu.cn/categories/notes/"/>
    
    
    <category term="Hyper-V" scheme="https://www.islu.cn/tags/Hyper-V/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="https://www.islu.cn/posts/MySQL.html"/>
    <id>https://www.islu.cn/posts/MySQL.html</id>
    <published>2022-10-27T15:41:14.000Z</published>
    <updated>2023-12-01T13:23:36.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过命令操作数据库【重点】"><a href="#通过命令操作数据库【重点】" class="headerlink" title="通过命令操作数据库【重点】"></a>通过命令操作数据库【重点】</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>标准格式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">C:\Users\FC<span class="operator">&gt;</span>mysql <span class="operator">-</span>h localhost <span class="operator">-</span>u root <span class="operator">-</span>P <span class="number">3306</span> <span class="operator">-</span>p</span><br><span class="line">Enter password: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">10</span></span><br><span class="line">Server version: <span class="number">5.7</span><span class="number">.31</span><span class="operator">-</span>log MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2020</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates. <span class="keyword">All</span> rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> input statement.</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>简化步骤</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">C:\Users\FC<span class="operator">&gt;</span>mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br><span class="line">Enter password: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">9</span></span><br><span class="line">Server version: <span class="number">5.7</span><span class="number">.31</span><span class="operator">-</span>log MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2020</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates. <span class="keyword">All</span> rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> input statement.</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><blockquote><p>注意分号不要忘</p></blockquote><h3 id="内置数据库"><a href="#内置数据库" class="headerlink" title="内置数据库"></a>内置数据库</h3><p><font color='#FF0000'>不要动！！！</font></p><table><thead><tr><th align="center">数据库名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">information_schema</td><td align="center">信息数据库，其中保存着关于所有数据库的信息（元数据）。<br />元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。</td></tr><tr><td align="center">mysql</td><td align="center">核心数据库，主要负责存储数据库的用户、权限设置、关键字等，<br />以及需要使用的控制和管理信息，不可以删除。</td></tr><tr><td align="center">performance_schema</td><td align="center">性能优化的数据库，MySQL 5.5版本中新增的一个性能优化的引擎。</td></tr><tr><td align="center">sys</td><td align="center">系统数据库，MySQL5.7版本中新增的可以快速的了解元数据信息的系统库<br/>便于发现数据库的多样信息，解决性能瓶颈问题。</td></tr></tbody></table><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line"><span class="keyword">create</span> database 数据库名;</span><br><span class="line"></span><br><span class="line"># 指定字符集创建数据库</span><br><span class="line"><span class="keyword">create</span> database 数据库名 <span class="type">character</span> <span class="keyword">set</span> <span class="operator">=</span> 编码集;</span><br><span class="line"># 例如：<span class="keyword">create</span> database student <span class="type">character</span> <span class="keyword">set</span> <span class="operator">=</span> gbk;</span><br><span class="line"></span><br><span class="line"># 指定字符集创建数据库</span><br><span class="line"><span class="keyword">create</span> database 数据库名 charset 编码集;</span><br><span class="line"># 例如：<span class="keyword">create</span> database student charset utf8;</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 删除数据库</span><br><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br><span class="line"># 例：<span class="keyword">drop</span> database student;</span><br></pre></td></tr></table></figure><h3 id="使用-选择数据库"><a href="#使用-选择数据库" class="headerlink" title="使用/选择数据库"></a>使用/选择数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 切换到指定数据库</span><br><span class="line">use 数据库名;</span><br><span class="line"># 例：use student;</span><br></pre></td></tr></table></figure><blockquote><p>选择数据库（因为服务器下面有可能有很多数据库， 我要选择哪一个数据库下面进行表的操作）</p></blockquote><h3 id="查看数据库的创建"><a href="#查看数据库的创建" class="headerlink" title="查看数据库的创建"></a>查看数据库的创建</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看数据库的创建过程</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database 数据库名;</span><br><span class="line"># 例：<span class="keyword">show</span> <span class="keyword">create</span> database student;</span><br></pre></td></tr></table></figure><h3 id="查看数据库的结构"><a href="#查看数据库的结构" class="headerlink" title="查看数据库的结构"></a>查看数据库的结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看数据库的结构</span><br><span class="line"><span class="keyword">desc</span> 表名</span><br><span class="line"># 例：<span class="keyword">desc</span> student;</span><br></pre></td></tr></table></figure><h2 id="数据类型【重点】"><a href="#数据类型【重点】" class="headerlink" title="数据类型【重点】"></a>数据类型【重点】</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>MySQL支持所有标准SQL数值数据类型。</p><p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。</p><p>关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。</p><p>BIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。</p><p>作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p><table><thead><tr><th>数据类型</th><th>取值范围</th></tr></thead><tbody><tr><td>tinyint</td><td>-128 ~ 127</td></tr><tr><td>int(integer)</td><td>4个字节，括号中代表显示的长度（无效），一般不加</td></tr><tr><td>bigint</td><td>8个字节存储</td></tr><tr><td>float</td><td>浮点型，4个字节，精度到6位</td></tr><tr><td>double</td><td>浮点型，8个字节，精度到第15位小数</td></tr><tr><td>decimal(p, [s])</td><td>p为精度（默认为0），s为小数位数（默认为10，不能为负数）</td></tr></tbody></table><blockquote><p>【注意事项】</p><p>decimal(p, [s])的小数位随便写，只保留有效位(s)，小数位有效位加整数位不能超过精度位(p)</p></blockquote><h3 id="字符串类型【重点】"><a href="#字符串类型【重点】" class="headerlink" title="字符串类型【重点】"></a>字符串类型【重点】</h3><table><thead><tr><th align="center">数据类型</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">char(n)</td><td align="center">定长字符串，n的范围：大于等于1小于等于255</td></tr><tr><td align="center">varchar(n)</td><td align="center">可变长字符串，n的返回为0~65535</td></tr><tr><td align="center">text</td><td align="center">文本类型，最大长度为64k</td></tr></tbody></table><blockquote><p>【注意事项】</p><p>1、char可以存储对应长度的数值，varchar也是允许的<br>类似于java中的类型转换</p><p>2、char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p></blockquote><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><table><thead><tr><th align="center">数据类型</th><th align="center">日期格式</th><th align="center">日期范围</th><th align="center">存储空间</th></tr></thead><tbody><tr><td align="center">YEAR</td><td align="center">YYYY</td><td align="center">1901 ~ 2155</td><td align="center">1个字节</td></tr><tr><td align="center">TIME</td><td align="center">HH:MM:SS</td><td align="center">-838:59:59 ~ 838:59:59</td><td align="center">3个字节</td></tr><tr><td align="center">DATE</td><td align="center">YYYY-MM-DD</td><td align="center">1000-01-01 ~ 9999-12-3</td><td align="center">3个字节</td></tr><tr><td align="center">DATETIME</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">1000-01-01 00:00:00 ~ 9999-12-3 23:59:59</td><td align="center">8个字节</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07 UTC</td><td align="center">8个字节</td></tr></tbody></table><blockquote><p>注意事项</p><p>要用字符形式添加</p></blockquote><h2 id="通过命令操作数据表"><a href="#通过命令操作数据表" class="headerlink" title="通过命令操作数据表"></a>通过命令操作数据表</h2><h3 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><blockquote><p>这里会提示空表</p></blockquote><h3 id="创建数据表【重点】"><a href="#创建数据表【重点】" class="headerlink" title="创建数据表【重点】"></a>创建数据表【重点】</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名 数据类型, 字段名 数据类型...);</span><br><span class="line"></span><br><span class="line"># 例如：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">id <span class="type">char</span>(<span class="number">10</span>),</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">25</span>),</span><br><span class="line">age tinyint,</span><br><span class="line">info text);</span><br></pre></td></tr></table></figure><h3 id="查看当前表结构"><a href="#查看当前表结构" class="headerlink" title="查看当前表结构"></a>查看当前表结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br><span class="line"># 例如：<span class="keyword">desc</span> student;</span><br></pre></td></tr></table></figure><h3 id="修改表-删除表字段"><a href="#修改表-删除表字段" class="headerlink" title="修改表 - 删除表字段"></a>修改表 - 删除表字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br><span class="line"># 例如： <span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> times;</span><br></pre></td></tr></table></figure><blockquote><p>这个只能一个一个删除，如果想批量删除需要借助存储过程</p></blockquote><h3 id="修改表-添加表字段"><a href="#修改表-添加表字段" class="headerlink" title="修改表 - 添加表字段"></a>修改表 - 添加表字段</h3><p>添加一个字段</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 数据类型;</span><br><span class="line"># 例如：<span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> age tinyint(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>在指定字段后添加字段</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 在指定字段后添加字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 数据类型 after 字段名;</span><br><span class="line"># 例如：<span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> id <span class="type">int</span> after birth;</span><br></pre></td></tr></table></figure><p>添加多个字段</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 添加多个字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 数据类型, <span class="keyword">add</span> 字段名 数据类型;</span><br><span class="line"># 例如：<span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> username <span class="type">varchar</span>(<span class="number">10</span>), <span class="keyword">add</span> password <span class="type">varchar</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>添加多个字段在指定字段后</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 添加多个字段在指定字段后</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 数据类型 after 字段名, <span class="keyword">add</span> 字段名 数据类型 after 字段名;</span><br><span class="line"># 例如：<span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> sex <span class="type">varchar</span>(<span class="number">10</span>) after password, <span class="keyword">add</span> hobby <span class="type">varchar</span>(<span class="number">10</span>) after age;</span><br></pre></td></tr></table></figure><h3 id="修改表-修改表字段"><a href="#修改表-修改表字段" class="headerlink" title="修改表 - 修改表字段"></a>修改表 - 修改表字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改指定字段的数据类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段名 字段类型</span><br><span class="line"># 例如：<span class="keyword">alter</span> <span class="keyword">table</span> student modify sex <span class="type">char</span>;</span><br></pre></td></tr></table></figure><p>修改指定字段的字段名和数据类型</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改指定字段的字段名和数据类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 要更改的字段名 更改后的字段名 更改后的字段类型</span><br><span class="line"># 例如：mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> student change sex gender <span class="type">boolean</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 数据表名;</span><br><span class="line"># 例如：<span class="keyword">drop</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></table></figure><h2 id="通过命令操作数据【重点】"><a href="#通过命令操作数据【重点】" class="headerlink" title="通过命令操作数据【重点】"></a>通过命令操作数据【重点】</h2><h3 id="插入数据-insert-into"><a href="#插入数据-insert-into" class="headerlink" title="插入数据(insert into)"></a>插入数据(insert into)</h3><p>插入完整数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 插入完整数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名 ...) <span class="keyword">values</span>(对应类型的数据 ...);</span><br><span class="line"># 例如：<span class="keyword">insert</span> <span class="keyword">into</span> student(id, name, age, sex, info) <span class="keyword">values</span>(<span class="number">1</span>, &quot;Buffer&quot;, <span class="number">23</span>, <span class="number">0</span>, &quot;我是文本类型&quot;);</span><br></pre></td></tr></table></figure><p>插入指定数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 插入指定数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(指定字段名 ...) <span class="keyword">values</span>(对应类型的数据 ...);</span><br><span class="line"># 例： <span class="keyword">insert</span> <span class="keyword">into</span> student(id, info) <span class="keyword">values</span>(<span class="number">1</span>, &quot;再次测试&quot;);</span><br></pre></td></tr></table></figure><p>快捷插入数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 快捷插入数据：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(表中所有字段对应的数据);</span><br><span class="line"># 例： <span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>, &quot;Wizard&quot;, <span class="number">22</span>, <span class="number">0</span>, &quot;我是DBA&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>【注意】一一对应</p></blockquote><h3 id="修改数据-update"><a href="#修改数据-update" class="headerlink" title="修改数据(update)"></a>修改数据(update)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改指定的数据</span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名 <span class="operator">=</span> 数据 <span class="keyword">where</span> 用于判断的字段名 <span class="operator">=</span> 数据;</span><br><span class="line"># 例：mysql<span class="operator">&gt;</span> uodate student <span class="keyword">set</span> name <span class="operator">=</span> &quot;烤羊排&quot; <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>【注意】慎用，必须加上 where 及判断的条件</p></blockquote><h3 id="删除数据-delete"><a href="#删除数据-delete" class="headerlink" title="删除数据(delete)"></a>删除数据(delete)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 删除指定的数据</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 用于判断的字段名 <span class="operator">=</span> 数据;</span><br><span class="line"># 例： <span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><blockquote><p>【注意】慎用，必须加上 where 及判断的条件</p></blockquote><h3 id="查看数据-select"><a href="#查看数据-select" class="headerlink" title="查看数据(select)"></a>查看数据(select)</h3><p>*代表通配符</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询表中所有字段的全部数据</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"># 例如：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这种格式真实开发中不要使用，会严重拖慢运行速度</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 按照指定字段进行查询</span><br><span class="line"><span class="keyword">select</span> 字段名, 字段名 ... <span class="keyword">from</span> student;</span><br><span class="line"># 例如：<span class="keyword">select</span> id, age <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 通过别名的方式进行查询</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">as</span> 别名, 字段名 <span class="keyword">as</span> 别名, ... <span class="keyword">from</span> 表名;</span><br><span class="line"># 例如：<span class="keyword">select</span> id <span class="keyword">as</span> &quot;编号&quot;, name <span class="keyword">as</span> &quot;姓名&quot;, info <span class="keyword">as</span> &quot;信息&quot; <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 最基本的条件查询</span><br><span class="line"><span class="keyword">select</span> 字段名... <span class="keyword">from</span> 表名 <span class="keyword">where</span> 用于判断的字段名 运算符 数据;</span><br><span class="line"># 例如：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>通过逻辑运算符使用多个条件进行查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名... <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件判断<span class="number">1</span> <span class="keyword">and</span>或者<span class="keyword">or</span> 条件判断<span class="number">2</span>;</span><br><span class="line"># 例如：<span class="keyword">select</span> name <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">&#x27;XXX&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="数据约束【重点】"><a href="#数据约束【重点】" class="headerlink" title="数据约束【重点】"></a>数据约束【重点】</h2><p>其实我们昨天创建表的方式是错的，只是针对于初学者来说，我们没有足够的只是储备，只能这么来写，并不符合开发的标准，因为不够严谨，需要对数据进行约束，比如我们的数据类型，就是一种最基本的约束，再比如我们的java中，也有类似的约束，private，static，final，abstract，native，synchronized，volatile，transient等都是对我们数据的约束，我们的mysql中同样也需要对数据进行一个约束</p><h3 id="默认值-default"><a href="#默认值-default" class="headerlink" title="默认值(default)"></a>默认值(default)</h3><p>用户在插入数据的时候，如果没有给予当前字段一个数据的话，当前字段会按照你设置的默认的值进行填充</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用默认值对数据进行约束</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    字段名 字段类型 <span class="keyword">default</span> 默认值</span><br><span class="line">);</span><br><span class="line"># 例：<span class="keyword">create</span> <span class="keyword">table</span> person(country <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">&#x27;PRC&#x27;</span>);</span><br></pre></td></tr></table></figure><p>修改数据库表字段并添加默认值</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test modify id <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="非空-not-null"><a href="#非空-not-null" class="headerlink" title="非空(not null)"></a>非空(not null)</h3><p>指定的字段必须有数据，不能为空</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 插入数据时必须给予对应的值，不能为空</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    字段名 字段类型 <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"># 例：<span class="keyword">alter</span> <span class="keyword">table</span> person(id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>);</span><br><span class="line"># 例：<span class="keyword">alter</span> <span class="keyword">table</span> person change id ssid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="唯一-unique"><a href="#唯一-unique" class="headerlink" title="唯一(unique)"></a>唯一(unique)</h3><p>被修饰的字段唯一，不能有重复数据</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 插入数据时不能添加重复的数据</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表<span class="operator">/</span>名(</span><br><span class="line">    字段名 字段类型 <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"># 例：<span class="keyword">create</span> <span class="keyword">table</span> person(id <span class="type">int</span> <span class="keyword">unique</span>);</span><br><span class="line"># 例：<span class="keyword">alter</span> <span class="keyword">table</span> test modify id <span class="type">int</span> <span class="keyword">unique</span>;</span><br></pre></td></tr></table></figure><h3 id="主键-primary-key"><a href="#主键-primary-key" class="headerlink" title="主键(primary key)"></a>主键(primary key)</h3><p>主键一般是该行数据的唯一的一个索引，并且修饰的这个字段只能类似于id字段</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 声明主键</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名 字段类型 <span class="keyword">primary</span> key);</span><br><span class="line"># 例：<span class="keyword">create</span> <span class="keyword">table</span> person(id <span class="type">int</span> <span class="keyword">primary</span> key);</span><br><span class="line"># 例：<span class="keyword">alter</span> <span class="keyword">table</span> person modify id <span class="type">int</span> <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure><p>第二种写法，是我们官方推荐的写法，但我们并不这样写</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 声明主键</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名 字段类型, <span class="keyword">primary</span> key(字段名));</span><br><span class="line"># 例：<span class="keyword">create</span> <span class="keyword">table</span> person1(id <span class="type">int</span>, <span class="keyword">primary</span> key(id));</span><br></pre></td></tr></table></figure><blockquote><p>【注意】：</p><p>1、任何情况下都应该给一张表添加一个主键字段</p><p>2、unique 和 not null 同时修饰一个字段时，等同于被 primary key 修饰</p><p>3、主键只能有一个</p><p>4、数据库设计中，一般会找一个与业务逻辑无关的字段设置为主键，性别，年龄，地址…都不能</p></blockquote><h3 id="自增长-auto-increment"><a href="#自增长-auto-increment" class="headerlink" title="自增长(auto_increment)"></a>自增长(auto_increment)</h3><p>插入数据的时候会自己增加，一般和主键一起使用修饰类似于id的字段</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名 字段类型 <span class="keyword">primary</span> key auto_increment);</span><br><span class="line"># 例：<span class="keyword">create</span> <span class="keyword">table</span> person(id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment);</span><br></pre></td></tr></table></figure><blockquote><p>【注意】</p><p>1、只能有一个字段使用 auto_increment ，它必须定义为键</p><p>2、auto_increment 只能修饰整型数据类型</p></blockquote><h3 id="外键约束【了解】"><a href="#外键约束【了解】" class="headerlink" title="外键约束【了解】"></a>外键约束【了解】</h3><p>首先先写一个表中，可以正常插入</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">    employee_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    employee_name <span class="type">varchar</span>(<span class="number">65</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;女&#x27;</span>, </span><br><span class="line">    dept_name <span class="type">varchar</span>(<span class="number">10</span>)  <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这时候我们发现了一个问题，员工表和部门表应该是分开的，耦合度太高了，怎么办</p><p>拆开成两张表</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> department(</span><br><span class="line">    department_id <span class="type">int</span> <span class="keyword">primary</span> key  auto_increment,</span><br><span class="line">    department_name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;销售部&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">    employee_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    employee_name <span class="type">varchar</span>(<span class="number">65</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;女&#x27;</span>, </span><br><span class="line">    dept_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后发现没有部门id也能插入成功，并且删除了部门表中的字段，员工表中的数据还存在，这也是不符合逻辑的。我们可以使用外键约束使员工表中的部门id和部门表中的id进行关联。</p><p>外键约束的格式：</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用外键约束，让两个表的字段存在关联关系con</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    <span class="keyword">constraint</span> 外键名 <span class="keyword">foreign</span> key (受到约束的字段) <span class="keyword">references</span> 约束数据表 (约束数据表中对应的字段)</span><br><span class="line">);</span><br><span class="line"># 例：<span class="keyword">create</span> <span class="keyword">table</span> employee(employee_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment, employee_name <span class="type">varchar</span>(<span class="number">65</span>) <span class="keyword">not</span> <span class="keyword">null</span>, gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;女&#x27;</span>, dept_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>, <span class="keyword">constraint</span> fk_employee_department <span class="keyword">foreign</span> key (dept_id) <span class="keyword">references</span> department (department_id));</span><br></pre></td></tr></table></figure><blockquote><p>时间戳 从1970年1月1日0点0分0秒到现在的秒数 timestamp 修饰时间的数据类型</p><p>一般会设置 default current_timestamp ，表示默认由当前时间创建</p></blockquote> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">    employee_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    employee_name <span class="type">varchar</span>(<span class="number">65</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;女&#x27;</span>,</span><br><span class="line">    dept_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    create_time <span class="type">timestamp</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span>,</span><br><span class="line">    <span class="keyword">constraint</span> fk_employee_department <span class="keyword">foreign</span> key (dept_id) <span class="keyword">references</span> department (department_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>【注意】外键约束之后会有如下特点：</p></blockquote><blockquote><p>1、先添加主表（部门表），再添加从表（员工表）</p><p>2、先删除从表，再删除主表</p><p>3、先修改从表，再修改主表</p><p>4、使用外键以后约束以后，数据就会变的非常乱，不利于程序员的思维方式</p></blockquote><h3 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h3><p>使用外键的时候，操作从表和主表都会存在问题 可以使用级联，通过级联删除和级联修改，可以直接操作主表中与子表中的字段</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">级联删除：</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">delete</span> cascade</span><br><span class="line"></span><br><span class="line">级联修改：</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">update</span> cascade</span><br></pre></td></tr></table></figure> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 级联删除格式</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(<span class="keyword">constraint</span> 外键名 <span class="keyword">foreign</span> key (受到约束的字段) <span class="keyword">references</span> 约束数据表 (约束数据表中对应的字段) <span class="keyword">on</span> <span class="keyword">delete</span> cascade);</span><br></pre></td></tr></table></figure> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 级联修改格式</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(<span class="keyword">constraint</span> 外键名 <span class="keyword">foreign</span> key (受到约束的字段) <span class="keyword">references</span> 约束数据表 (约束数据表中对应的字段) <span class="keyword">on</span> <span class="keyword">update</span> cascade);</span><br></pre></td></tr></table></figure><h2 id="数据查询【重点】"><a href="#数据查询【重点】" class="headerlink" title="数据查询【重点】"></a>数据查询【重点】</h2><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><h4 id="使用通配符查询全部字段"><a href="#使用通配符查询全部字段" class="headerlink" title="使用通配符查询全部字段"></a>使用通配符查询全部字段</h4> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询表中所有字段的全部数据</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"># 例如：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><h4 id="查询部分字段"><a href="#查询部分字段" class="headerlink" title="查询部分字段"></a>查询部分字段</h4> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询表中的指定字段</span><br><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>, 字段名<span class="number">2.</span>.. <span class="keyword">from</span> 表名;</span><br><span class="line"># 例：<span class="keyword">SELECT</span> employee_id,first_name,email <span class="keyword">FROM</span> t_employees;</span><br></pre></td></tr></table></figure><h4 id="查询所有字段"><a href="#查询所有字段" class="headerlink" title="查询所有字段"></a>查询所有字段</h4> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询表中的所有字段</span><br><span class="line"><span class="keyword">select</span> 所有字段名 <span class="keyword">from</span> 表名</span><br><span class="line"># 例：<span class="keyword">select</span> id, name, age, sex, info <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">注意：生产环境下，优先使用列名查询。* 的方式需转换成全列名，效率低，可读性差。</a></p></blockquote><h3 id="对字段的数据进行运算"><a href="#对字段的数据进行运算" class="headerlink" title="对字段的数据进行运算"></a>对字段的数据进行运算</h3> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 对查询结果进行运算</span><br><span class="line"><span class="keyword">select</span> 字段名 运算符 操作数 <span class="keyword">from</span> 表名;</span><br><span class="line"># 例：<span class="keyword">select</span> salary <span class="operator">*</span> <span class="number">12</span> <span class="keyword">from</span> t_employees;</span><br><span class="line"># 例：<span class="keyword">select</span> salary <span class="operator">*</span> <span class="number">12</span> <span class="keyword">as</span> <span class="string">&#x27;年薪&#x27;</span> <span class="keyword">from</span> t_employees;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">算数运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">两列做加法运算</td></tr><tr><td align="center">-</td><td align="center">两列做减法运算</td></tr><tr><td align="center">*</td><td align="center">两列做乘法运算</td></tr><tr><td align="center">/</td><td align="center">两列做除法运算</td></tr></tbody></table><blockquote><p><a href="">注意：%是占位符，而非模运算符。</a></p></blockquote><h3 id="通过别名查询-as"><a href="#通过别名查询-as" class="headerlink" title="通过别名查询(as)"></a>通过别名查询(as)</h3> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 通过别名的方式进行查询</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">as</span> 别名, 字段名 <span class="keyword">as</span> 别名, ... <span class="keyword">from</span> 表名;</span><br><span class="line"># 例如：<span class="keyword">select</span> id <span class="keyword">as</span> &quot;编号&quot;, name <span class="keyword">as</span> &quot;姓名&quot;, info <span class="keyword">as</span> &quot;信息&quot; <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><h3 id="查询结果去重-distinct"><a href="#查询结果去重-distinct" class="headerlink" title="查询结果去重(distinct)"></a>查询结果去重(distinct)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询结果去重</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段名 <span class="keyword">from</span> 表名;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="keyword">distinct</span> salary <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><table><thead><tr><th align="center">排序规则</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">asc</td><td align="center">对前面排序列做升序排序</td></tr><tr><td align="center">desc</td><td align="center">对前面排序列做降序排序</td></tr></tbody></table><h4 id="依据单字段排序"><a href="#依据单字段排序" class="headerlink" title="依据单字段排序"></a>依据单字段排序</h4> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 单列排序</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 指定排序字段 [<span class="keyword">asc</span>或<span class="keyword">desc</span>];</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> salary;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">asc</span>;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><blockquote><p>【注意】不加排序为默认为升序</p></blockquote><h4 id="依据多字段排序"><a href="#依据多字段排序" class="headerlink" title="依据多字段排序"></a>依据多字段排序</h4> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 多列排序</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 指定排序字段 [<span class="keyword">asc</span>或<span class="keyword">desc</span>], 指定排序字段 [<span class="keyword">asc</span>或<span class="keyword">desc</span>]...; </span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">asc</span>, age <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><blockquote><p>【注意】先根据第一个排序字段排序，如果第一个字段相同，再根据第二个字段排序</p></blockquote><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><h4 id="等值判断（-）"><a href="#等值判断（-）" class="headerlink" title="等值判断（=）"></a>等值判断（=）</h4> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 等值判断查询</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名 <span class="operator">=</span> 值;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> salary <span class="operator">=</span> <span class="number">6200</span>;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">注意：与 java 不同（==），mysql 中等值判断使用 =</a></p></blockquote><h4 id="逻辑判断（and、or、not）"><a href="#逻辑判断（and、or、not）" class="headerlink" title="逻辑判断（and、or、not）"></a>逻辑判断（and、or、not）</h4> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 逻辑判断查询</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> [<span class="keyword">not</span>] 条件一 逻辑运算符 条件二...;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> salary <span class="operator">!=</span> <span class="number">0</span> <span class="keyword">and</span> email <span class="operator">=</span> <span class="string">&#x27;SKING&#x27;</span>;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> salary <span class="operator">=</span> <span class="number">6200</span> <span class="keyword">or</span> email <span class="operator">=</span> <span class="string">&#x27;SKING&#x27;</span> <span class="keyword">or</span> LAST_NAME <span class="operator">=</span> <span class="string">&#x27;Steven&#x27;</span>;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">not</span> SALARY <span class="operator">=</span> <span class="number">9000</span>;</span><br></pre></td></tr></table></figure><h4 id="不等值判断（-gt-、-lt-、-gt-、-lt-、-、-lt-gt-）"><a href="#不等值判断（-gt-、-lt-、-gt-、-lt-、-、-lt-gt-）" class="headerlink" title="不等值判断（&gt; 、&lt; 、&gt;= 、&lt;= 、!= 、&lt;&gt;）"></a>不等值判断（&gt; 、&lt; 、&gt;= 、&lt;= 、!= 、&lt;&gt;）</h4> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 不等值判断查询</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名 关系运算符 值</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="number">6200</span>;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> salary <span class="operator">&lt;=</span> <span class="number">6200</span>;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> salary <span class="operator">!=</span> <span class="number">6200</span>;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> salary <span class="operator">&lt;&gt;</span> <span class="number">6200</span>;</span><br></pre></td></tr></table></figure><blockquote><p>【注意】&lt;&gt;表示不等于</p></blockquote><h4 id="区间判断（between-and）"><a href="#区间判断（between-and）" class="headerlink" title="区间判断（between and）"></a>区间判断（between and）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询员工的薪资在<span class="number">6000</span><span class="operator">~</span><span class="number">10000</span>之间的员工信息（编号，名字，薪资）</span><br><span class="line"><span class="keyword">SELECT</span> employee_id , first_name , salary</span><br><span class="line"><span class="keyword">FROM</span> t_employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> <span class="number">6000</span> <span class="keyword">AND</span> <span class="number">10000</span>; #闭区间，包含区间边界的两个值</span><br></pre></td></tr></table></figure><ul><li><a href="">注：在区间判断语法中，小值在前，大值在后，反之，得不到正确结果</a></li></ul><h4 id="NULL-值判断（IS-NULL、IS-NOT-NULL）"><a href="#NULL-值判断（IS-NULL、IS-NOT-NULL）" class="headerlink" title="NULL 值判断（IS NULL、IS NOT NULL）"></a>NULL 值判断（IS NULL、IS NOT NULL）</h4><blockquote><p>IS NULL</p><p>  列名 IS NULL</p><p>IS NOT NULL</p><p>  列名 IS NOT NULL</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询没有提成的员工信息（编号，名字，薪资 , 提成）</span><br><span class="line"><span class="keyword">SELECT</span> employee_id , first_name , salary , commission_pct</span><br><span class="line"><span class="keyword">FROM</span> t_employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h4 id="枚举查询（-IN-值-1，值-2，值-3-）（后面会用，尽管效率低）"><a href="#枚举查询（-IN-值-1，值-2，值-3-）（后面会用，尽管效率低）" class="headerlink" title="枚举查询（ IN (值 1，值 2，值 3 ) ）（后面会用，尽管效率低）"></a>枚举查询（ IN (值 1，值 2，值 3 ) ）（后面会用，尽管效率低）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询部门编号为<span class="number">70</span>、<span class="number">80</span>、<span class="number">90</span>的员工信息（编号，名字，薪资 , 部门编号）</span><br><span class="line"><span class="keyword">SELECT</span> employee_id , first_name , salary , department_id</span><br><span class="line"><span class="keyword">FROM</span> t_employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span>(<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注：in的查询效率较低，可通过多条件拼接。</p></blockquote><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><blockquote><p>LIKE _ （单个任意字符）</p><p>  列名 LIKE ‘张_’</p><p> %（任意长度的任意字符）</p><p>  列名 LIKE ‘张%’</p></blockquote><ul><li><a href="">注意：模糊查询只能和 LIKE 关键字结合使用</a></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询名字以&quot;L&quot;开头的员工信息（编号，名字，薪资 , 部门编号）</span><br><span class="line"><span class="keyword">SELECT</span> employee_id , first_name , salary , department_id</span><br><span class="line"><span class="keyword">FROM</span> t_employees</span><br><span class="line"><span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;L%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查询名字以&quot;L&quot;开头并且长度为<span class="number">4</span>的员工信息（编号，名字，薪资 , 部门编号）</span><br><span class="line"><span class="keyword">SELECT</span> employee_id , first_name , salary , department_id</span><br><span class="line"><span class="keyword">FROM</span> t_employees</span><br><span class="line"><span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;L___&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="分支结构查询"><a href="#分支结构查询" class="headerlink" title="分支结构查询"></a>分支结构查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span></span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span></span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">3</span> <span class="keyword">THEN</span> 结果<span class="number">3</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="">注意：通过使用CASE END进行条件判断，每条数据对应生成一个值。</a><br><a href="">经验：类似 Java 中的switch。</a></p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询员工信息（编号，名字，薪资 , 薪资级别<span class="operator">&lt;</span>对应条件表达式生成<span class="operator">&gt;</span>）</span><br><span class="line"><span class="keyword">SELECT</span> employee_id , first_name , salary , department_id , </span><br><span class="line">       <span class="keyword">CASE</span></span><br><span class="line">           <span class="keyword">WHEN</span> salary<span class="operator">&gt;=</span><span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> salary<span class="operator">&gt;=</span><span class="number">8000</span> <span class="keyword">AND</span> salary<span class="operator">&lt;</span><span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> salary<span class="operator">&gt;=</span><span class="number">6000</span> <span class="keyword">AND</span> salary<span class="operator">&lt;</span><span class="number">8000</span>  <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> salary<span class="operator">&gt;=</span><span class="number">4000</span> <span class="keyword">AND</span> salary<span class="operator">&lt;</span><span class="number">6000</span>  <span class="keyword">THEN</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line">   <span class="keyword">ELSE</span> <span class="string">&#x27;E&#x27;</span></span><br><span class="line">       <span class="keyword">END</span> <span class="keyword">as</span> &quot;LEVEL&quot;</span><br><span class="line"><span class="keyword">FROM</span> t_employees;</span><br></pre></td></tr></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><blockquote><p>语法：SELECT 列名 FROM 表名 WHERE 条件  <a href="">GROUP BY 分组依据（列）;</a></p></blockquote><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>GROUP BY</td><td>分组依据，必须在 WHERE 之后生效</td></tr></tbody></table><h4 id="7-8-1-查询各部门的总人数"><a href="#7-8-1-查询各部门的总人数" class="headerlink" title="7.8.1 查询各部门的总人数"></a>7.8.1 查询各部门的总人数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#思路：</span><br><span class="line">#<span class="number">1.</span>按照部门编号进行分组（分组依据是 department_id）</span><br><span class="line">#<span class="number">2.</span>再针对各部门的人数进行统计（count）</span><br><span class="line"><span class="keyword">SELECT</span> department_id,<span class="built_in">COUNT</span>(employee_id)</span><br><span class="line"><span class="keyword">FROM</span> t_employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id; </span><br></pre></td></tr></table></figure><h4 id="7-8-2-查询各部门的平均工资"><a href="#7-8-2-查询各部门的平均工资" class="headerlink" title="7.8.2 查询各部门的平均工资"></a>7.8.2 查询各部门的平均工资</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#思路：</span><br><span class="line">#<span class="number">1.</span>按照部门编号进行分组（分组依据department_id）。</span><br><span class="line">#<span class="number">2.</span>针对每个部门进行平均工资统计（avg）。</span><br><span class="line"><span class="keyword">SELECT</span> department_id , <span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> t_employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br></pre></td></tr></table></figure><h4 id="7-8-3-查询各个部门、各个岗位的人数"><a href="#7-8-3-查询各个部门、各个岗位的人数" class="headerlink" title="7.8.3 查询各个部门、各个岗位的人数"></a>7.8.3 查询各个部门、各个岗位的人数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#思路：</span><br><span class="line">#<span class="number">1.</span>按照部门编号进行分组（分组依据 department_id）。</span><br><span class="line">#<span class="number">2.</span>按照岗位名称进行分组（分组依据 job_id）。</span><br><span class="line">#<span class="number">3.</span>针对每个部门中的各个岗位进行人数统计（count）。</span><br><span class="line"><span class="keyword">SELECT</span> department_id , job_id , <span class="built_in">COUNT</span>(employee_id)</span><br><span class="line"><span class="keyword">FROM</span> t_employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id , job_id;</span><br></pre></td></tr></table></figure><h4 id="7-8-4-常见问题"><a href="#7-8-4-常见问题" class="headerlink" title="7.8.4 常见问题"></a>7.8.4 常见问题</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询各个部门id、总人数、first_name</span><br><span class="line"><span class="keyword">SELECT</span> department_id , <span class="built_in">COUNT</span>(<span class="operator">*</span>) , first_name</span><br><span class="line"><span class="keyword">FROM</span> t_employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id; #error</span><br></pre></td></tr></table></figure><ul><li><a href="">注：分组查询中，select显示的列只能是分组依据列，或者聚合函数列，不能出现其他列。</a></li></ul><h3 id="分组过滤查询"><a href="#分组过滤查询" class="headerlink" title="分组过滤查询"></a>分组过滤查询</h3><blockquote><p>语法：SELECT 列名 FROM 表名 WHERE 条件 GROUP BY 分组列 <a href="">HAVING 过滤规则</a></p></blockquote><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>HAVING 过滤规则</td><td>过滤规则定义对分组后的数据进行过滤</td></tr></tbody></table><h4 id="7-9-1-统计部门的最高工资"><a href="#7-9-1-统计部门的最高工资" class="headerlink" title="7.9.1 统计部门的最高工资"></a>7.9.1 统计部门的最高工资</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#统计<span class="number">60</span>、<span class="number">70</span>、<span class="number">90</span>号部门的最高工资</span><br><span class="line">#思路：</span><br><span class="line">#<span class="number">1</span>).确定分组依据（department_id）</span><br><span class="line">#<span class="number">2</span>).对分组后的数据，过滤出部门编号是<span class="number">60</span>、<span class="number">70</span>、<span class="number">90</span>信息</span><br><span class="line">#<span class="number">3</span>).<span class="built_in">max</span>()函数处理</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> department_id , <span class="built_in">MAX</span>(salary) <span class="comment">--查什么</span></span><br><span class="line"><span class="keyword">FROM</span> t_employees<span class="comment">--从哪查</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id<span class="comment">--以。。。分组</span></span><br><span class="line"><span class="keyword">HAVING</span> department_id <span class="keyword">in</span> (<span class="number">60</span>,<span class="number">70</span>,<span class="number">90</span>)。。。过滤掉不应该出现的部门id</span><br><span class="line"></span><br><span class="line"># <span class="keyword">group</span>确定分组依据department_id </span><br><span class="line">#<span class="keyword">having</span>过滤出<span class="number">60</span> <span class="number">70</span> <span class="number">90</span>部门</span><br><span class="line">#<span class="keyword">select</span>查看部门编号和max函数。</span><br></pre></td></tr></table></figure><h3 id="限定查询-limit"><a href="#限定查询-limit" class="headerlink" title="限定查询(limit)"></a>限定查询(limit)</h3><p>可以减缓服务器压力</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 限定查询</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 limit 起始行, 查询行数;</span><br></pre></td></tr></table></figure><blockquote><p>【注意】</p></blockquote><blockquote><p>起始行是从 0 开始，代表了第一行。第二个参数代表的是从指定行开始查询几行</p><p>如果只有一个数字，会默认从第一条数据开始，显示数字对应的条数</p></blockquote><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>一页显示 10 条，一共查询三页</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 思路：第一页是从 <span class="number">0</span>开始，显示 <span class="number">10</span> 条</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student LIMIT <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 第二页是从第 <span class="number">10</span> 条开始，显示 <span class="number">10</span> 条</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student LIMIT <span class="number">10</span>,<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 第三页是从 <span class="number">20</span> 条开始，显示 <span class="number">10</span> 条</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student LIMIT <span class="number">20</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、在分页应用场景中，起始行是变化的，但是一页显示的条数是不变的</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、分页公式：pageCount是页数，length是每页显示多少条</span><br><span class="line"></span><br><span class="line">limit (pageCount <span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> length, length</span><br></pre></td></tr></table></figure><h3 id="模糊查询-1"><a href="#模糊查询-1" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>搜索里面很常用</p><p>格式：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 指定查询字段 <span class="keyword">like</span> 匹配值;</span><br></pre></td></tr></table></figure><blockquote><p>【注意】这里的匹配值需要使用占位符来占位，占位符分为两种：下划线和百分号</p></blockquote><table><thead><tr><th align="center">占位符</th><th align="center">占多少位</th></tr></thead><tbody><tr><td align="center">_</td><td align="center">单个字符</td></tr><tr><td align="center">%</td><td align="center">不限定字符个数（可以是0个1个或者多个）</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用单个字符占位符进行模糊查询</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 指定查询字段 <span class="keyword">like</span> 匹配值;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;呵__&#x27;</span>;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;呵_&#x27;</span>;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;_呵&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用多个字符占位符进行模糊查询</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 指定查询字段 <span class="keyword">like</span> 匹配值;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;呵%&#x27;</span>;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%呵%&#x27;</span>;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%呵&#x27;</span>;</span><br></pre></td></tr></table></figure><p>最常用：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%呵%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="合并查询（了解）"><a href="#合并查询（了解）" class="headerlink" title="合并查询（了解）"></a>合并查询（了解）</h3> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 合并两张表的结果，去除重复记录</span><br><span class="line"><span class="keyword">select</span> 字段... <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> 字段... <span class="keyword">from</span> 表<span class="number">2</span>;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> father <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> son;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">注意：合并结果的两张表，列数必须相同，列的数据类型可以不同</a></p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 合并两张表的结果，不去除重复记录（显示所有）</span><br><span class="line"><span class="keyword">select</span> 字段... <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> 字段... <span class="keyword">from</span> 表<span class="number">2</span>;</span><br><span class="line"># 例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> father <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> son;</span><br></pre></td></tr></table></figure><blockquote><p>[经验：使用 UNION 合并结果集，会去除掉两张表中重复的数据](</p></blockquote><h2 id="联表查询【重点】"><a href="#联表查询【重点】" class="headerlink" title="联表查询【重点】"></a>联表查询【重点】</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><p>1、查什么</p><p>2、从哪查</p><p>3、查询条件</p></blockquote><h3 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a><strong>交叉连接</strong></h3><p>左表中的所有行，左表中的每一行与右表中的所有行再一一组合，形成的结果集的数据行数相当于两个表数据行数“相乘”后的结果。这种情况在数据库连接查询中，被称为交叉连接（也称为笛卡尔乘积连接）。在数据库中创建连接查询非常简单，只需要指明连接的表以及他们之间的关系即可</p><p>格式</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名  <span class="keyword">from</span> 表<span class="number">1</span>, 表<span class="number">2.</span>.. <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询员工的姓名和对应的部门名称</span><br><span class="line"><span class="keyword">select</span> emp.EMPNO, emp.ENAME, dept.DNAME <span class="keyword">from</span> emp, dept <span class="keyword">where</span> emp.DEPTNO <span class="operator">=</span> dept.DEPTNO;</span><br></pre></td></tr></table></figure><p>【注意】查询的字段需要通过 表名. 的形式来指明是哪张具体的表，如果查询条件中的字段，如果不指明是哪张表会报错，因为对于相同的字段无法判断到底是哪张表下的</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 直接通过字段名进行查询员工的姓名和对应的部门名称，不指定具体某个表下的字段，因为字段是不重复的</span><br><span class="line"><span class="keyword">select</span> EMPNO, ENAME, DNAME <span class="keyword">from</span> emp, dept <span class="keyword">where</span> emp.DEPTNO <span class="operator">=</span> dept.DEPTNO;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 错误演示：重复字段没有指明表</span><br><span class="line"><span class="keyword">select</span> EMPNO, ENAME, DNAME, DEPTNO <span class="keyword">from</span> emp, dept <span class="keyword">where</span> emp.DEPTNO <span class="operator">=</span> dept.DEPTNO;</span><br><span class="line"></span><br><span class="line"># 正确演示，指明表中的字段</span><br><span class="line"><span class="keyword">select</span> EMPNO, ENAME, DNAME, emp.DEPTNO <span class="keyword">from</span> emp, dept <span class="keyword">where</span> emp.DEPTNO <span class="operator">=</span> dept.DEPTNO;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 通过对表起别名进行查询员工的姓名和对应的部门名称以及部门编号</span><br><span class="line"><span class="keyword">select</span> e.EMPNO, e.ENAME, d.DNAME, e.DEPTNO <span class="keyword">from</span> emp <span class="keyword">as</span> e, dept <span class="keyword">as</span> d <span class="keyword">where</span> e.DEPTNO <span class="operator">=</span> d.DEPTNO;</span><br></pre></td></tr></table></figure><p>【注意】as可以省略</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 通过对表起别名（省略<span class="keyword">as</span>）进行查询员工的姓名和对应的部门名称以及部门编号</span><br><span class="line"><span class="keyword">select</span> e.EMPNO, e.ENAME, d.DNAME, e.DEPTNO <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.DEPTNO <span class="operator">=</span> d.DEPTNO;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 对字段进行起别名查询</span><br><span class="line"><span class="keyword">select</span> e.EMPNO <span class="keyword">as</span> `员工号`, e.ENAME <span class="keyword">as</span> `员工姓名`, d.DNAME <span class="keyword">as</span> `部门名称` <span class="keyword">from</span> emp <span class="keyword">as</span> e, dept <span class="keyword">as</span> d <span class="keyword">where</span> e.DEPTNO <span class="operator">=</span> d.DEPTNO;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 省略<span class="keyword">as</span>对字段进行起别名查询</span><br><span class="line"><span class="keyword">select</span> e.EMPNO `员工号`, e.ENAME `员工姓名`, d.DNAME `部门名称` <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.DEPTNO <span class="operator">=</span> d.DEPTNO;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 对查询的结果根据薪资进行倒序排序</span><br><span class="line"><span class="keyword">select</span> e.EMPNO <span class="keyword">as</span> `员工号`, e.ENAME `员工姓名`, d.DNAME `部门名称` <span class="keyword">from</span> emp <span class="keyword">as</span> e, dept <span class="keyword">as</span> d <span class="keyword">where</span> e.DEPTNO <span class="operator">=</span> d.DEPTNO <span class="keyword">order</span> <span class="keyword">by</span> e.EMPNO <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="内连接查询（INNER-JOIN-ON）"><a href="#内连接查询（INNER-JOIN-ON）" class="headerlink" title="内连接查询（INNER JOIN ON）"></a>内连接查询（INNER JOIN ON）</h3><p>和交叉连接的效果是一样的</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">inner</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用内连接查询员工号，员工姓名及部门名称并对其起别名</span><br><span class="line"><span class="keyword">select</span> e.EMPNO `员工号`, e.ENAME `员工姓名`, d.DNAME `部门名称` <span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> dept d </span><br><span class="line"><span class="keyword">on</span> e.DEPTNO <span class="operator">=</span> d.DEPTNO;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">经验：在 MySql 中，第交叉查询方式也可以作为内连接查询，不&gt;符合 SQL 标准</a><br><a href="">而内连接属于 SQL 标准，与其他关系型数据库通用</a></p></blockquote><h3 id="三表连接查询"><a href="#三表连接查询" class="headerlink" title="三表连接查询"></a>三表连接查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询所有员工工号、名字、部门名称、部门所在国家ID</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_employees e </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> t_departments d </span><br><span class="line"><span class="keyword">on</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> t_locations l</span><br><span class="line"><span class="keyword">ON</span> d.location_id <span class="operator">=</span> l.location_id</span><br></pre></td></tr></table></figure><h3 id="左外连接（LEFT-JOIN-ON）"><a href="#左外连接（LEFT-JOIN-ON）" class="headerlink" title="左外连接（LEFT JOIN ON）"></a>左外连接（LEFT JOIN ON）</h3><blockquote><p><a href="">注意：左外连接，是以左表为主表，依次向右匹配，匹配到，返回结果</a><br><a href="">匹配不到，则返回 NULL 值填充</a></p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用左外连接查询员工号、员工姓名和部门名称</span><br><span class="line"><span class="keyword">select</span> e.EMPNO `员工号`, e.ENAME `员工姓名`, d.DNAME `部门名称` <span class="keyword">from</span> emp e </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d </span><br><span class="line"><span class="keyword">on</span> e.DEPTNO <span class="operator">=</span> d.DEPTNO;</span><br></pre></td></tr></table></figure><h3 id="右外连接（RIGHT-JOIN-ON）"><a href="#右外连接（RIGHT-JOIN-ON）" class="headerlink" title="右外连接（RIGHT JOIN ON）"></a>右外连接（RIGHT JOIN ON）</h3><blockquote><p><a href=""><a href="">注意：右外连接，是以右表为主表，依次向左匹配，匹配到，返回结果</a></a><br><a href="">匹配不到，则返回 NULL 值填充</a></p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用右外连接查询员工号、员工姓名和部门名称</span><br><span class="line"><span class="keyword">select</span> e.EMPNO `员工号`, e.ENAME `员工姓名`, d.DNAME `部门名称` <span class="keyword">from</span> emp e </span><br><span class="line"><span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d </span><br><span class="line"><span class="keyword">on</span> e.DEPTNO <span class="operator">=</span> d.DEPTNO;</span><br></pre></td></tr></table></figure><h2 id="子查询【掌握】"><a href="#子查询【掌握】" class="headerlink" title="子查询【掌握】"></a>子查询【掌握】</h2><h4 id="查询结果作为条件"><a href="#查询结果作为条件" class="headerlink" title="查询结果作为条件"></a>查询结果作为条件</h4><blockquote><p>SELECT 列名 FROM 表名  <a href="">Where 条件 (子查询结果)</a></p></blockquote><h5 id="查询工资大于螺蛳粉的员工信息"><a href="#查询工资大于螺蛳粉的员工信息" class="headerlink" title="查询工资大于螺蛳粉的员工信息"></a>查询工资大于螺蛳粉的员工信息</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span>先查询到 螺蛳粉 的工资（一行一列）</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;螺蛳粉&#x27;</span></span><br><span class="line"># 工资是 <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span>查询工资大于 螺蛳粉 的员工信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span>将 <span class="number">1</span>、<span class="number">2</span> 两条语句整合</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> salary <span class="operator">&gt;</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;螺蛳粉&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p><a href="">注意：将子查询 ”一行一列“的结果作为外部查询的条件，做第二次查询</a><br><a href="">子查询得到一行一列的结果才能作为外部查询的等值判断条件</a></p></blockquote><h4 id="作为枚举查询条件"><a href="#作为枚举查询条件" class="headerlink" title="作为枚举查询条件"></a>作为枚举查询条件</h4><blockquote><p>SELECT 列名 FROM 表名 Where 列名 <a href="">in(子查询结果);</a></p></blockquote><h5 id="查询薪资与年龄等于20岁的员工的薪资相同的信息"><a href="#查询薪资与年龄等于20岁的员工的薪资相同的信息" class="headerlink" title="查询薪资与年龄等于20岁的员工的薪资相同的信息"></a>查询薪资与年龄等于20岁的员工的薪资相同的信息</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#思路：</span><br><span class="line"># <span class="number">1.</span> 先查询年龄为<span class="number">20</span>的人员的薪资(多行单列)</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"># <span class="number">5000</span>和<span class="number">6000</span></span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span> 再查询薪资为<span class="number">5000</span>、<span class="number">6000</span>的员工信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> salary <span class="keyword">in</span> (<span class="number">5000</span>, <span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span><span class="keyword">SQL</span>：合并</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> salary <span class="keyword">in</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">20</span>); </span><br></pre></td></tr></table></figure><ul><li><a href="">将子查询 ”多行一列“的结果作为外部查询的枚举查询条件，做第二次查询</a></li></ul><h5 id="查询薪资高于年龄等于20岁的员工的薪资相同的信息"><a href="#查询薪资高于年龄等于20岁的员工的薪资相同的信息" class="headerlink" title="查询薪资高于年龄等于20岁的员工的薪资相同的信息"></a>查询薪资高于年龄等于20岁的员工的薪资相同的信息</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span>先查询年龄为<span class="number">20</span>的人员的薪资(多行单列)</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span>查询薪资高于年龄为<span class="number">20</span>的所有人的员工信息（高于所有）</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">all</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span>查询薪资高于年龄为<span class="number">20</span>的部分人的员工信息（高于部分）</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">any</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">20</span>);</span><br></pre></td></tr></table></figure><ul><li><a href="">注意：当子查询结果集形式为多行单列时可以使用 ANY 或 ALL 关键字</a></li></ul><h4 id="派生表"><a href="#派生表" class="headerlink" title="派生表"></a>派生表</h4><blockquote><p>SELECT 列名 FROM<a href="">（子查询的结果集）</a> as 表名 WHERE 条件;</p></blockquote><h5 id="查询工资排名前-5-名的员工中薪资最低的员工"><a href="#查询工资排名前-5-名的员工中薪资最低的员工" class="headerlink" title="查询工资排名前 5 名的员工中薪资最低的员工"></a>查询工资排名前 5 名的员工中薪资最低的员工</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 思路：</span><br><span class="line"># <span class="number">1.</span>先拿到排名前<span class="number">5</span>名的员工所有信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span> limit <span class="number">0</span>, <span class="number">5</span></span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span>再查询临时表中前<span class="number">5</span>行员工信息</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(salary) <span class="keyword">from</span> (派生表);</span><br><span class="line"></span><br><span class="line"># <span class="keyword">SQL</span>：合并</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(test.salary) `薪水` <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span> limit <span class="number">0</span>, <span class="number">5</span>) <span class="keyword">as</span> test;</span><br></pre></td></tr></table></figure><p>将子查询 ”多行多列“的结果作为外部查询的一张表，做第二次查询</p><h2 id="查询执行顺序【掌握】"><a href="#查询执行顺序【掌握】" class="headerlink" title="查询执行顺序【掌握】"></a>查询执行顺序【掌握】</h2><p>介绍完了所有查询相关的语法，我们来把之前的所有语法集中到一个句子中。</p><p>这才是完整的SELECT查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> colume, AGG_FUNC ( <span class="operator">*</span> column_or_expression <span class="operator">*</span> ), … </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">mytable</span><br><span class="line"><span class="keyword">JOIN</span> another_table <span class="keyword">ON</span> mytable.COLUMN <span class="operator">=</span> another_table.COLUMN </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">constraint_expression </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">column</span> </span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">constraint_expression </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">column</span> <span class="keyword">ASC</span> <span class="operator">/</span> <span class="keyword">DESC</span> </span><br><span class="line">LIMIT count <span class="keyword">OFFSET</span> COUNT;</span><br></pre></td></tr></table></figure><p>一个查询SQL的执行总是先从数据里按条件选出数据，然后对这些数据再次做一些整理处理，按要求返回成结果，让结果尽可能是简单直接的。因为一个<br>查询SQL由很多部分组成，所以搞清楚这些部分的执行顺序还挺重要的，这有助于我们更深刻的理解SQL执行过程.</p><p>查询执行顺序</p><ol><li><code>FROM</code> 和 <code>JOIN</code>s</li></ol><p><code>FROM</code> 或 <code>JOIN</code>会第一个执行，确定一个整体的数据范围. 如果要JOIN不同表，可能会生成一个临时Table来用于<br>下面的过程。总之第一步可以简单理解为确定一个数据源表（含临时表)</p><ol start="2"><li><code>WHERE</code></li></ol><p>我们确定了数据来源 <code>WHERE</code> 语句就将在这个数据源中按要求进行数据筛选，并丢弃不符合要求的数据行，所有的筛选col属性<br>只能来自<code>FROM</code>圈定的表. AS别名还不能在这个阶段使用，因为可能别名是一个还没执行的表达式</p><ol start="3"><li><code>GROUP BY</code></li></ol><p>如果你用了 <code>GROUP BY</code> 分组，那<code>GROUP BY</code> 将对之前的数据进行分组，统计等，并将是结果集缩小为分组数.这意味着 其他的数据在分组后丢弃.</p><ol start="4"><li><code>HAVING</code></li></ol><p>如果你用了 <code>GROUP BY</code> 分组, <code>HAVING</code> 会在分组完成后对结果集再次筛选。AS别名也不能在这个阶段使用.</p><ol start="5"><li><code>SELECT</code></li></ol><p>确定结果之后，<code>SELECT</code>用来对结果col简单筛选或计算，决定输出什么数据.</p><ol start="6"><li><code>DISTINCT</code></li></ol><p>如果数据行有重复<code>DISTINCT</code> 将负责排重.</p><ol start="7"><li><code>ORDER BY</code></li></ol><p>在结果集确定的情况下，<code>ORDER BY</code> 对结果做排序。因为<code>SELECT</code>中的表达式已经执行完了。此时可以用AS别名.</p><ol start="8"><li><code>LIMIT</code> / <code>OFFSET</code></li></ol><p>最后 <code>LIMIT</code> 和 <code>OFFSET</code> 从排序的结果中截取部分数据.</p><p>结论</p><blockquote><p>不是每一个SQL语句都要用到所有的句法，但灵活运用以上的句法组合和深刻理解SQL执行原理将能在SQL层面更好的解决数据问题，而不用把问题都抛给程序逻辑.</p></blockquote><h2 id="内置函数【了解】"><a href="#内置函数【了解】" class="headerlink" title="内置函数【了解】"></a>内置函数【了解】</h2><p>如果没有特别的需求，就不要使用，因为会拖慢数据库的执行效率</p><h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><blockquote><p>语法：SELECT <a href="">时间函数([参数列表]) </a></p></blockquote><blockquote><p><a href="">经验：执行时间函数查询，会自动生成一张虚表（一行一列）</a></p></blockquote><table><thead><tr><th>时间函数</th><th align="left">描述</th></tr></thead><tbody><tr><td>sysdate()</td><td align="left">当前系统时间（年-月-日 时:分:秒）</td></tr><tr><td>current_timestamp()</td><td align="left">当前系统时间（年-月-日 时:分:秒）</td></tr><tr><td>now()</td><td align="left">当前系统时间（年-月-日 时:分:秒）</td></tr><tr><td>curdate()</td><td align="left">获取当前日期（年-月-日）</td></tr><tr><td>current_date()</td><td align="left">获取当前日期（年-月-日）</td></tr><tr><td>curtime()</td><td align="left">获取当前时间（时:分:秒）</td></tr><tr><td>current_time()</td><td align="left">获取当前时间（时:分:秒）</td></tr><tr><td>week(指定日期)</td><td align="left">获取指定日期为一年中的第几周</td></tr><tr><td>year(指定日期)</td><td align="left">获取指定日期的年份</td></tr><tr><td>month(指定日期)</td><td align="left">获取指定日期的月份</td></tr><tr><td>day(指定日期)</td><td align="left">获取指定日期的日</td></tr><tr><td>hour(指定时间)</td><td align="left">获取指定时间的小时值</td></tr><tr><td>minute(指定时间)</td><td align="left">获取时间的分钟值</td></tr><tr><td>second(指定时间)</td><td align="left">获取时间的秒值</td></tr><tr><td>datediff(date1, date2)</td><td align="left">获取 date1 和 date2 之间相隔的天数（date1 - date2）</td></tr><tr><td>adddate(date, N)</td><td align="left">计算 date 加上 N 天后的日期</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取当前时间的年月日时分秒</span><br><span class="line"><span class="keyword">select</span> sysdate();</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">current_timestamp</span>();</span><br><span class="line"><span class="keyword">select</span> now();</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取当前时间的年月日</span><br><span class="line"><span class="keyword">select</span> curdate();</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">current_date</span>();</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取当前时间的时分秒</span><br><span class="line"><span class="keyword">select</span> curtime();</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">current_time</span>();</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取指定日期对应一年中的星期数</span><br><span class="line"><span class="keyword">select</span> week(<span class="string">&#x27;2020-10-24&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 获取当前日期对应一年中的星期数</span><br><span class="line"><span class="keyword">select</span> week(curdate());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取指定日期中的年</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(<span class="string">&#x27;2020-10-24&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 获取当前日期的年</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(curdate());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取指定日期中的月份</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">month</span>(<span class="string">&#x27;2020-10-24&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 获取当前日期的月份</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">month</span>(curdate());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取指定日期中的天</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">day</span>(<span class="string">&#x27;2020-10-24&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 获取当前日期的天</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">day</span>(curdate());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取指定时间中的小时</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">hour</span>(<span class="string">&#x27;10:20:30&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 获取当前时间中的小时</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">hour</span>(curtime());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取指定时间中的分钟</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">minute</span>(‘<span class="number">10</span>:<span class="number">20</span>:<span class="number">30</span>’);</span><br><span class="line"></span><br><span class="line"># 获取当前时间中的分钟</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">minute</span>(curtime());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取指定时间中的秒</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">second</span>(‘<span class="number">10</span>:<span class="number">20</span>:<span class="number">30</span>’);</span><br><span class="line"></span><br><span class="line"># 获取当前时间中的秒</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">second</span>(curtime());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取两个日期之间的差值</span><br><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2021-03-01&#x27;</span>, curdate());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取指定日期加上指定天数后的日期</span><br><span class="line"><span class="keyword">select</span> adddate(curdate(), <span class="number">7</span>);</span><br></pre></td></tr></table></figure><h3 id="字符串查询"><a href="#字符串查询" class="headerlink" title="字符串查询"></a>字符串查询</h3><blockquote><p>语法： SELECT <a href="">字符串函数 ([参数列表])</a></p></blockquote><table><thead><tr><th>字符串函数</th><th>描述</th></tr></thead><tbody><tr><td>concat(str1,str2,str….)</td><td>将多个字符串连接</td></tr><tr><td>insert(str,pos,len,newStr)</td><td>将 str 中指定 pos 位置开始 len 长度的内容替换为 newStr</td></tr><tr><td>lower(str)</td><td>将指定字符串转换为小写</td></tr><tr><td>upper(str)</td><td>将指定字符串转换为大写</td></tr><tr><td>substring(str,num,len)</td><td>将 str 字符串从指定 num 位置开始截取  len 个长度的内容</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 拼接字符串</span><br><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;My&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;QL&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 在指定位置使用新字符串替换指定长度的旧字符串</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">insert</span>(<span class="string">&#x27;这是数据库&#x27;</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="string">&#x27;MySQL&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 将指定字符串转换为小写</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(<span class="string">&#x27;MYSQL&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 指定内容转换为大写</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 从指定位置开始截取指定长度的字符串</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;MySQL&#x27;</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><blockquote><p>语法：SELECT <a href="">聚合函数(字段名)</a> FROM 表名;</p></blockquote><p><a href="">经验：对多条数据的单列进行统计，返回统计后的一行结果。</a></p><table><thead><tr><th>聚合函数</th><th>描述</th></tr></thead><tbody><tr><td>sum(字段名)</td><td>求所有行中单列结果的总和</td></tr><tr><td>avg([distinct] 字段名)</td><td>平均值</td></tr><tr><td>max([distinct] 字段名)</td><td>最大值</td></tr><tr><td>min([distinct] 字段名)</td><td>最小值</td></tr><tr><td>count([distinct] 字段名)</td><td>计数</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取学生表中薪水的最大值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(salary) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取学生表中薪水的平均值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"># 获取学生表中不重复的薪水的平均值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(<span class="keyword">distinct</span> salary) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取学生表中薪水的最大值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(salary) <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"># 获取学生表中不重复的薪水的最大值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(<span class="keyword">distinct</span> salary) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取学生表中薪水的最小值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(salary) <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"># 获取学生表中不重复的薪水的最小值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(<span class="keyword">distinct</span> salary) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取表中数据的行数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"># 获取指定字段的行数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(salary) <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"># 获取指定字段去重后的行数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> salary) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><p><a href="">注意：聚合函数自动忽略null值，不进行统计。</a></p><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><table><thead><tr><th>数学函数</th><th>描述</th></tr></thead><tbody><tr><td>abs(X)</td><td>绝对值</td></tr><tr><td>ceil(X)</td><td>向上取整</td></tr><tr><td>floor(X)</td><td>向下取整</td></tr><tr><td>round(X, D)</td><td>对 X 四舍五入，D为保留的位数，可以是正数负数或者0</td></tr><tr><td>rand()</td><td>随机数，[0, 1)</td></tr><tr><td>mod(M, N)</td><td>取 M 除以 N 的余数</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取绝对值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">abs</span>(<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 向上取整</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">ceil</span>(<span class="number">12.45</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 向下取整</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">12.45</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 四舍五入，保留一位小数</span><br><span class="line"><span class="keyword">select</span> round(<span class="number">12.45</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 取<span class="number">0</span>到<span class="number">1</span>之间的随机数，能取到<span class="number">0</span>取不到<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> rand();</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 取余数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">10</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><table><thead><tr><th>系统函数</th><th>描述</th></tr></thead><tbody><tr><td>database()</td><td>获取当前数据库名</td></tr><tr><td>user()</td><td>获取当前用户名</td></tr><tr><td>version()</td><td>获取当前MySQL版本</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取当前数据库名</span><br><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取当前用户名</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>();</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取当前MySQL版本</span><br><span class="line"><span class="keyword">select</span> version();</span><br></pre></td></tr></table></figure><h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a><strong>加密函数</strong></h3><table><thead><tr><th>加密函数</th><th>描述</th></tr></thead><tbody><tr><td>password(str)</td><td>返回字符串str的加密版本</td></tr><tr><td>md5(str)</td><td>使用 MD5 算法进行加密</td></tr><tr><td>encode(str,key)</td><td>使用 key 作为密钥解密加密字符串 str</td></tr><tr><td>decode(str, pswd_str)</td><td>使用 pswd_str 作为密匙对 str 进行解密</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 对指定字符串进行加密</span><br><span class="line"><span class="keyword">select</span> password(<span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 对指定字符串进行加密</span><br><span class="line"><span class="keyword">select</span> md5(<span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 加密</span><br><span class="line"><span class="keyword">select</span> encode(<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 解密</span><br><span class="line"><span class="keyword">select</span> decode(encode(<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;123&#x27;</span>), <span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="事务【重点】"><a href="#事务【重点】" class="headerlink" title="事务【重点】"></a>事务【重点】</h2><h3 id="事务介绍"><a href="#事务介绍" class="headerlink" title="事务介绍"></a>事务介绍</h3><h4 id="事务的概念"><a href="#事务的概念" class="headerlink" title="事务的概念"></a>事务的概念</h4><blockquote><p>事务指逻辑上的一组原子性的操作，组成这组操作的各个单元，要不全部成功，要不全部不成功</p></blockquote><h4 id="事务相关命令"><a href="#事务相关命令" class="headerlink" title="事务相关命令"></a>事务相关命令</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 开启事务 </span><br><span class="line">#（等同于<span class="keyword">set</span> autocommit <span class="operator">=</span> off ）</span><br><span class="line">#（等同于<span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span> ）</span><br><span class="line"><span class="keyword">start</span> transaction </span><br><span class="line"></span><br><span class="line"># 回滚事务</span><br><span class="line"><span class="keyword">rollback</span></span><br><span class="line"></span><br><span class="line"># 提交事务</span><br><span class="line"><span class="keyword">commit</span></span><br></pre></td></tr></table></figure><h3 id="Mysql中使用事务"><a href="#Mysql中使用事务" class="headerlink" title="Mysql中使用事务"></a>Mysql中使用事务</h3><h4 id="MySQL中事务默认自动提交的"><a href="#MySQL中事务默认自动提交的" class="headerlink" title="MySQL中事务默认自动提交的"></a>MySQL中事务默认自动提交的</h4><p>每当执行一条SQL，就会提交一个事务 （一条SQL 就是一个事务）；Oracle 中事务默认 不自动提交，需要在执行SQL 语句后 通过 commit<br>手动提交事务。</p><h4 id="MySQL-管理事务的方式【重要】"><a href="#MySQL-管理事务的方式【重要】" class="headerlink" title="MySQL 管理事务的方式【重要】"></a>MySQL 管理事务的方式【重要】</h4><p>方式一 ：通过手动事务管理 SQL 语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 开启事务</span><br><span class="line"><span class="keyword">start</span> transaction</span><br><span class="line"></span><br><span class="line"># 回滚事务 （将数据恢复到事务开始时状态）</span><br><span class="line"><span class="keyword">rollback</span></span><br><span class="line"></span><br><span class="line"># 提交事务 （对事务中进行操作，进行确认操作，事务在提交后，数据就不可恢复）</span><br><span class="line"><span class="keyword">commit</span></span><br></pre></td></tr></table></figure><p>方式二：设置自动提交</p><p>数据库中存在一个自动提交变量 ，通过</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%commit%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>—- autocommint 值是 on，说明开启自动提交，通过命令可以关闭自动提交</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> off <span class="operator">/</span> <span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>如果设置 autocommit 为 off，意味着以后每条SQL 都会处于一个事务中，相当于每条SQL执行前 都执行 start transaction</p><p>补充：Oracle中 autocommit 默认就是 off</p></blockquote><h3 id="JDBC-使用事务【了解】"><a href="#JDBC-使用事务【了解】" class="headerlink" title="JDBC 使用事务【了解】"></a>JDBC 使用事务【了解】</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p>当Jdbc程序向数据库获得一个Connection对象时，默认情况下这个Connection对象会自动向数据库提交在它上面发送的SQL语句。可以通过命令关闭这种默认提交方式，让多条SQL在一个事务中执行</p></blockquote><h4 id="JDBC控制事务语句"><a href="#JDBC控制事务语句" class="headerlink" title="JDBC控制事务语句"></a>JDBC控制事务语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于start transaction</span></span><br><span class="line">connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// rollback</span></span><br><span class="line">connection.rollback();</span><br><span class="line"></span><br><span class="line"><span class="comment">// commit</span></span><br><span class="line">connection.commit();</span><br></pre></td></tr></table></figure><h3 id="事务特性-ACID"><a href="#事务特性-ACID" class="headerlink" title="事务特性(ACID)"></a>事务特性(ACID)</h3><h4 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h4><p>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p><h4 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h4><p>事务前后数据的完整性必须保持一致。</p><h4 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h4><p>事务的隔离性是指多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务所干扰，多个并发事务之间数据要相互隔离。</p><h4 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h4><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</p><blockquote><p>【注】：多个线程开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个线程在获取数据时的准确性</p></blockquote><h3 id="为什么要有事务的隔离级别"><a href="#为什么要有事务的隔离级别" class="headerlink" title="为什么要有事务的隔离级别"></a>为什么要有事务的隔离级别</h3><p>多个线程开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个线程在获取数据时的准确性，避免脏读、不可重复读和幻读的问题。</p><h3 id="事务的四种隔离级别"><a href="#事务的四种隔离级别" class="headerlink" title="事务的四种隔离级别"></a>事务的四种隔离级别</h3><blockquote><p>数据库内部定义了四种隔离级别，用于解决三种隔离问题</p></blockquote><p>1、Serializable：可避免脏读、不可重复读、虚读情况的发生。（串行化、序列化）</p><p>2、Repeatable Read：可避免脏读、不可重复读情况的发生。（可重复读）不可以避免虚读</p><p>3、Read Committed：可避免脏读情况发生（读已提交）</p><p>4、Read uncommitted：最低级别，以上情况均无法保证。(读未提交)</p><blockquote><p>【注意】事务的隔离级别越高，效率越低！！！</p></blockquote><h3 id="设置事务的隔离级别"><a href="#设置事务的隔离级别" class="headerlink" title="设置事务的隔离级别"></a>设置事务的隔离级别</h3><h4 id="mysql中设置"><a href="#mysql中设置" class="headerlink" title="mysql中设置"></a>mysql中设置</h4><h5 id="查看事务隔离级别"><a href="#查看事务隔离级别" class="headerlink" title="查看事务隔离级别"></a>查看事务隔离级别</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询当前事务隔离级别</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx_isolation</span> </span><br></pre></td></tr></table></figure><blockquote><p>mysql中默认的事务隔离级别是 Repeatable read.</p></blockquote><blockquote><p>扩展:oracle 中默认的事务隔离级别是 Read committed</p></blockquote><h5 id="mysql中设置事务隔离级别"><a href="#mysql中设置事务隔离级别" class="headerlink" title="mysql中设置事务隔离级别"></a>mysql中设置事务隔离级别</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 设置事务隔离级别（当前会话）</span><br><span class="line"><span class="keyword">set</span> session transaction isolation level   </span><br><span class="line"></span><br><span class="line"># 设置事务隔离级别（全局）</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level  </span><br></pre></td></tr></table></figure><h5 id="JDBC中设置事务隔离级别"><a href="#JDBC中设置事务隔离级别" class="headerlink" title="JDBC中设置事务隔离级别"></a>JDBC中设置事务隔离级别</h5><p>Connection接口中定义事务隔离级别四个常量：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指示不可以发生脏读的常量；不可重复读和虚读可以发生。 </span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> TRANSACTION_READ_COMMITTED </span><br><span class="line"></span><br><span class="line"><span class="comment">// 指示可以发生脏读 (dirty read)、不可重复读和虚读 (phantom read) 的常量。 </span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> TRANSACTION_READ_UNCOMMITTED </span><br><span class="line"></span><br><span class="line"><span class="comment">// 指示不可以发生脏读和不可重复读的常量；虚读可以发生。 </span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> TRANSACTION_REPEATABLE_READ </span><br><span class="line"></span><br><span class="line"><span class="comment">// 指示不可以发生脏读、不可重复读和虚读的常量。 </span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> TRANSACTION_SERIALIZABLE </span><br></pre></td></tr></table></figure><p>设置隔离级别</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置数据库隔离级别</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setTransactionIsolation</span><span class="params">(<span class="type">int</span> level)</span> </span><br></pre></td></tr></table></figure><h3 id="三种隔离问题"><a href="#三种隔离问题" class="headerlink" title="三种隔离问题"></a>三种隔离问题</h3><h5 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h5><blockquote><p>读取到了其他事务未提交的数据</p></blockquote><p>A 转账 给B 100，未提交</p><p>B 查询账户多了100</p><p>A 回滚</p><p>B 查询账户那100不见了</p><h5 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h5><blockquote><p>读取到了其他事务提交的数据（强调数据更新 update和 delete）</p><p>简单理解：一个事务范围内两个相同的查询却返回了不同结果</p></blockquote><p>A 查询账户 5000</p><p>B 向 A 账户转入 5000</p><p>A 查询账户 10000</p><h5 id="虚读-幻读"><a href="#虚读-幻读" class="headerlink" title="虚读(幻读)"></a>虚读(幻读)</h5><blockquote><p>读取到了其他事务提交的数据 （强调数据记录变化 insert ）</p></blockquote><p>A 第一次读取 存在5条记录</p><p>B 向 A 插入一条新的记录</p><p>A 第二次读取 存在6条记录</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote></blockquote><p>当我们进行增删改操作的时候，涉及到一些数据安全性的问题，可以使用事务来进行完善处理，首先关闭自动提交（<a href="">set autocommit = 0;</a><br>），如果我们发现我们的增删改操作是有问题的，那我们可以回滚到<a href="">autocommit = 0</a><br>之前，如果我们的操作是没有问题的，就使用<a href="">commit</a>进行提交操作，此时我们set <a href="">autocommit = 0</a>到<a href="">commit</a>中间的所有操作都会生效。</p><h2 id="索引【重点】"><a href="#索引【重点】" class="headerlink" title="索引【重点】"></a>索引【重点】</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><blockquote><p>MySQL 官方对索引的定义为：索引是帮助 MySQL 高效获取数据的数据结构。</p><p>数据本身之外，数据库还维护着一个满足特定查找算法的数据结构，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法，这种数据结构就是索引。</p><p>简单理解：排好序的快速查找数据结构！</p></blockquote><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><blockquote><p>提高查找效率</p></blockquote><h3 id="索引的特点"><a href="#索引的特点" class="headerlink" title="索引的特点"></a>索引的特点</h3><blockquote><p>我们平常所说的索引，如果没有特别指明，都是指B树(多路搜索树，并不一定是二叉的)</p></blockquote><p>结构组织的索引。其中聚集索引，次要索引复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。当然，除了B+树这种类型的索引之外，还有哈稀索引(</p><blockquote><p>hashindex)等。</p></blockquote><h3 id="素引的优点"><a href="#素引的优点" class="headerlink" title="素引的优点"></a>素引的优点</h3><blockquote><p>1、类似大学图书馆建书目索引，提高数据检索的效率，降低数据库的IO成本</p><p>2、通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗</p></blockquote><h3 id="索引的缺点"><a href="#索引的缺点" class="headerlink" title="索引的缺点"></a>索引的缺点</h3><blockquote><p>1、实际上索引也是一张表，该表保存了主键与索引字段、并指向实体表的记录，所以索引列也是要占用空间的。虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。每次更新添加了索引列的字段，都会调整，因为更新所带来的键值变化后的索引信息会发生改变。</p><p>2、索引需要占用磁盘空间，甚至有可能比数据本身占用的空间还要大。</p><p>3、索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立和维护最优秀的索引，或优化查询条件</p></blockquote><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><h4 id="普通索引-单列索引-【常用】"><a href="#普通索引-单列索引-【常用】" class="headerlink" title="普通索引(单列索引)【常用】"></a>普通索引(单列索引)【常用】</h4><p>一个索引只包含单个列，一个表可以有多个单列索引</p><p>普通索引是MySQL中的基本索引类型，允许在定义索引的列中插入重复值和空值。</p><h4 id="唯一索引【常用】"><a href="#唯一索引【常用】" class="headerlink" title="唯一索引【常用】"></a>唯一索引【常用】</h4><p>索引列的值必须唯一，但允许有空值(但只能有一个)。</p><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p>主键索引是一种特殊的唯一索引，不允许有空值。主键索引一定是唯一索引，但是唯一索引不一定是主键索引。</p><h4 id="组合索引-复合索引-【重要】"><a href="#组合索引-复合索引-【重要】" class="headerlink" title="组合索引(复合索引)【重要】"></a>组合索引(复合索引)【重要】</h4><p>组合素引指在表的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用。使用组合索引时遵循最左前缀集合。</p><blockquote><p>【注意】</p><p>1、当需要频繁地将两列或多列作为一个整体进行搜索时，可以创建组合索引</p><p>2、创建组合索引时先列出唯一性良好的列。</p><p>3、组合索引中列的顺序和数量会影响查询的性能。</p></blockquote><h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><p>全文索引类型为 FULTEXT，在定义索引的列上支持值的全文查找，允许在这些索引列中插入重复值和空值。全文案引可以在 CHAR、VARCHAR<br>成者 TEXT 类型的列上设置，同时在 MySQL 中只有 MyISAM 存储引擎支持全文索引。</p><h4 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h4><p>空间索引是对空间数据类型的字段建立的案引，MySQL 中的空间数据类型有4种，分储是：GEOMETRY、POINT、LINESTRING 和 POLYGON。MySQL<br>使用SPATIAL 关键字进行扩展，使得能够用于创建正规索引类似的语法创建建空间索引。创建空间索引的字段，必须设置NOT<br>NULL约束。空间索引只能在存储引擎为 MyISAM 的表中创建。</p><h3 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h3><p>索引的设计不合理或者缺少索引都会影响数据库和应用程序的性能。高效的索引对于获得良好的性能非常重要。设计索引时，应该考虑以下准则:</p><p>1、索引并非越多越好，一个表中如果有大量的索引，不仅占用磁盘空间，而且会影响 INSERT、DELETE、UPDATE<br>等语句的性能，因为当表中的数据更改时，索引也会进行调整和更新。</p><p>2、避免对经常更新的列设置索引，并且索引中的列尽可能少。而对经常用于查询的字段应该创建索引，但要避免添加不必要的字段。</p><p>3、数据量小的表最好不要使用索引，由于数据量较少，查询花费的时间可能比遍历索引的时间还短，索引可能不会产生优化效果。</p><p>4、在不同值较少的字段上不必要建立索引，如性别字段。</p><p>5、在频繁进行排序或分组的列上建立索引，如果经常需要排序的列有多个，可以在这些列上建立组合索引。</p><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看指定表中的索引相关信息</span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> 表名;</span><br><span class="line"># 例：<span class="keyword">show</span> index <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>添加主键索引</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为<span class="keyword">NULL</span>。</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">primary</span> key (列名);</span><br><span class="line"># 例：<span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> <span class="keyword">primary</span> key (id);</span><br></pre></td></tr></table></figure><p>添加唯一索引</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 这条语句创建索引的值必须是唯一的（除了<span class="keyword">NULL</span>外，<span class="keyword">NULL</span>可能会出现多次)。</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">unique</span> [索引名] (列名);</span><br><span class="line"># 例：<span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> <span class="keyword">unique</span> index_name (name);</span><br></pre></td></tr></table></figure><p>添加普通索引</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 添加普通索引，索引值可出现多次。</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> index [索引名] (列名);</span><br><span class="line"># 例：<span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> index index_age (age);</span><br></pre></td></tr></table></figure><p>添加全文索引</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 该语句指定了索引为 FULLTEXT，用于全文索引。</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> fulltext [索引名] (列名);</span><br><span class="line"># 例：<span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> fulltext index_full (info);</span><br></pre></td></tr></table></figure><p>创建表时指定索引</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建表时可以同时声明索引</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名 数据类型 [数据约束...], 字段名 数据类型 [数据约束...], 索引<span class="number">1</span>, 索引<span class="number">2.</span>..);</span><br><span class="line"># 例：<span class="keyword">create</span> <span class="keyword">table</span> student(id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">10</span>), <span class="keyword">primary</span> key (id), index index_name (name));</span><br></pre></td></tr></table></figure><blockquote><p>【注意】索引名不是必须的，如果没有声明会由默认的字段名代替</p></blockquote><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&gt;</span># 删除指定表中的指定索引</span><br><span class="line"><span class="operator">&gt;</span><span class="keyword">drop</span> index [索引名] <span class="keyword">on</span> 表名;</span><br><span class="line"><span class="operator">&gt;</span># 例：<span class="keyword">drop</span> index username <span class="keyword">on</span> account;</span><br></pre></td></tr></table></figure></blockquote><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><h4 id="BTree索引"><a href="#BTree索引" class="headerlink" title="BTree索引"></a>BTree索引</h4><h4 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h4><h4 id="full-text全文索引"><a href="#full-text全文索引" class="headerlink" title="full-text全文索引"></a>full-text全文索引</h4><h4 id="R-Tree索引"><a href="#R-Tree索引" class="headerlink" title="R-Tree索引"></a>R-Tree索引</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;通过命令操作数据库【重点】&quot;&gt;&lt;a href=&quot;#通过命令操作数据库【重点】&quot; class=&quot;headerlink&quot; title=&quot;通过命令操作数据库【重点】&quot;&gt;&lt;/a&gt;通过命令操作数据库【重点】&lt;/h2&gt;&lt;h3 id=&quot;连接数据库&quot;&gt;&lt;a href=&quot;#连接数据</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.islu.cn/categories/notes/"/>
    
    
    <category term="MySQL" scheme="https://www.islu.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>安装Hyper-V创建虚拟机</title>
    <link href="https://www.islu.cn/posts/InstallHyper-VAndCreateVirtualMachine.html"/>
    <id>https://www.islu.cn/posts/InstallHyper-VAndCreateVirtualMachine.html</id>
    <published>2022-08-25T08:18:34.000Z</published>
    <updated>2023-12-01T13:23:36.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li>具有计算机管理员权限的用户帐户。</li><li>足够的内存来运行您计划同时运行的所有虚拟机。</li><li>作为虚拟机的来宾操作系统安装的软件。</li><li>该教程仅适用于在 Windows 8 或 Windows 8.1 以上</li></ul><h2 id="安装Hyper-V"><a href="#安装Hyper-V" class="headerlink" title="安装Hyper-V"></a>安装Hyper-V</h2><h3 id="使用程序和功能启用Hyper-V"><a href="#使用程序和功能启用Hyper-V" class="headerlink" title="使用程序和功能启用Hyper-V"></a>使用程序和功能启用Hyper-V</h3><ol><li><p>在控制面板中，单击<strong>程序</strong>&gt;<strong>程序和功能</strong>。</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="InstallHyper-VAndCreateVirtualMachine/ProgramsAndFeatures.png" alt="ProgramsAndFeatures"></p></li><li><p>单击<strong>打开或关闭 Windows 功能</strong>。</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="InstallHyper-VAndCreateVirtualMachine/OpenHyper-V.png" alt="OpenHyper-V"></p></li><li><p>单击<strong>Hyper-V</strong>，单击<strong>确定</strong>，然后单击<strong>关闭</strong>。</p></li></ol><blockquote><p>Hyper-V 是一项可选功能，因此安装所需的文件可能存在也可能不存在于您的计算机上，具体取决于您组织的 IT 策略。如果您已连接到 Internet 并启用了该功能，所需的文件将自动下载。如果您没有连接到 Internet，您可以下载所需的文件并手动将它们复制到您的计算机上。否则，您必须提供安装介质。</p></blockquote><h3 id="使用-PowerShell-启用Hyper-V"><a href="#使用-PowerShell-启用Hyper-V" class="headerlink" title="使用 PowerShell 启用Hyper-V"></a>使用 PowerShell 启用Hyper-V</h3><ol><li><p>使用提升的用户权限打开 Windows PowerShell 会话。为此，请单击 Windows<strong>开始</strong>按钮并键入<strong>PowerShell</strong>。右键单击<strong>PowerShell</strong>，然后单击<strong>以管理员身份运行</strong>。</p></li><li><p>运行以下命令。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All</span><br></pre></td></tr></table></figure></li><li><p>安装完成后，重新启动计算机。</p></li></ol><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>您可以使用 Hyper-V 管理器中的向导或使用 Windows PowerShell 创建虚拟机。</p><h3 id="在-Hyper-V-管理器中创建虚拟机"><a href="#在-Hyper-V-管理器中创建虚拟机" class="headerlink" title="在 Hyper-V 管理器中创建虚拟机"></a>在 Hyper-V 管理器中创建虚拟机</h3><ol><li>打开 Hyper-V 管理器。</li><li>从 Hyper-V 管理器的导航窗格中，选择运行 Hyper-V 的计算机。</li><li>在“操作”窗格中，单击<strong>新建</strong>&gt;<strong>虚拟机</strong>。</li><li>在新建虚拟机向导中单击<strong>下一步。</strong></li><li>在<strong>指定名称和位置</strong>页面上，键入适当的名称。</li><li>在<strong>分配内存</strong>页面上，指定足够的内存来启动客户操作系统。</li><li>在<strong>配置网络</strong>页面上，将虚拟机连接到您在安装 Hyper-V 时创建的交换机。</li><li>在<strong>连接虚拟硬盘</strong>和<strong>安装选项</strong>页面上，选择适合您计划安装来宾操作系统的选项：<ul><li>如果您要从 DVD 或映像文件（.ISO 文件）安装来宾操作系统，请选择<strong>Create a virtual hard disk</strong>。单击<strong>下一步</strong>，然后单击描述您将使用的媒体类型的选项。例如，要使用 .iso 文件，请单击<strong>从引导 CD/DVD 安装操作系统</strong>，然后指定 .iso 文件的路径。</li><li>如果客户机操作系统已安装在虚拟硬盘中，请选择<strong>使用现有虚拟硬盘</strong>并单击<strong>下一步</strong>。然后，选择<strong>稍后安装操作系统</strong>。</li></ul></li><li>在摘要页面上，验证您的选择，然后单击<strong>完成</strong>。</li></ol><h3 id="Windows-PowerShell创建虚拟机"><a href="#Windows-PowerShell创建虚拟机" class="headerlink" title="Windows PowerShell创建虚拟机"></a>Windows PowerShell创建虚拟机</h3><p>您可以使用<a href="https://technet.microsoft.com/library/hh848537(v=wps.630).aspx">New-VM</a> cmdlet 在 Windows PowerShell 中创建虚拟机。例如，运行以下命令来创建一个名为 web server 的虚拟机，它具有 1 GB 的启动内存，并使用已经安装了客户操作系统的现有虚拟硬盘。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">New-VM –Name “web server” –MemoryStartupBytes 1GB –VHDPath d:\vhd\BaseImage.vhdx</span><br></pre></td></tr></table></figure><p>参考教程 <a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh846766(v=ws.11)">Microsoft Docs</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;先决条件&quot;&gt;&lt;a href=&quot;#先决条件&quot; class=&quot;headerlink&quot; title=&quot;先决条件&quot;&gt;&lt;/a&gt;先决条件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;具有计算机管理员权限的用户帐户。&lt;/li&gt;
&lt;li&gt;足够的内存来运行您计划同时运行的所有虚拟机。&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.islu.cn/categories/notes/"/>
    
    
    <category term="Hyper-V" scheme="https://www.islu.cn/tags/Hyper-V/"/>
    
  </entry>
  
  <entry>
    <title>JDK安装和配置</title>
    <link href="https://www.islu.cn/posts/WindowsInstallJDK.html"/>
    <id>https://www.islu.cn/posts/WindowsInstallJDK.html</id>
    <published>2022-08-14T10:35:24.000Z</published>
    <updated>2023-12-01T13:23:36.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://www.oracle.com/java/technologies/downloads/#java8">官方连接</a></p><p><a href="https://www.aliyundrive.com/s/hgcoATujH3r">阿里云盘</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallJDK/install_process.png" alt="install_process"></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallJDK/choose_path.png" alt="choose_path"></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallJDK/install_success.png" alt="install_success"></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p><a href="https://islu.cn/posts/9977.html">参考文章</a></p><p>参考上文中环境变量文章，将 <code>MySQL</code> 的环境变量换为 <code>JDK</code> 即可</p><p>新建 <code>JAVA_HOME</code> 值 <code>JDK安装路径</code></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallJDK/path_javaHome.png" alt="path_javaHome"></p><p>添加 <code>Path</code> 值 <code> %JAVA_HOME%\bin</code></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallJDK/path_path.png" alt="path_path"></p><h2 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h2><p>使用 <code>CMD</code> 打开命令窗口后输入 <code>javac</code> </p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallJDK/success.png" alt="success"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.oracle.com/java/technologies/downloads/#java8&quot;&gt;官方</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.islu.cn/categories/notes/"/>
    
    
    <category term="Java" scheme="https://www.islu.cn/tags/Java/"/>
    
    <category term="Windows" scheme="https://www.islu.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>MySQL安装和配置</title>
    <link href="https://www.islu.cn/posts/WindowsInstallMySQL.html"/>
    <id>https://www.islu.cn/posts/WindowsInstallMySQL.html</id>
    <published>2022-08-10T22:30:36.000Z</published>
    <updated>2023-12-01T13:23:36.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>从 <a href="https://dev.mysql.com/downloads/">传送门</a> 内寻找安装方式</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/install_url.png" alt="install_url"></p><p>选择版本及下载安装方式</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/install_v.png" alt="install_version"></p><p>下载成功</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/down_success.png" alt="down_success"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>选择安装方式<br><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/install_type.jpg" alt="install_type"></p><p>选择后点击 <code>Next</code> 进行下一步，此处我选择 <code>自定义</code> 安装方式</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/choose_install_server.jpg" alt="choose_install_server"></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/set_install_url.jpg" alt="set_install_url"></p><p>基本上一路 <code>Next</code></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/installing.jpg" alt="installing"></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/type_networking.jpg" alt="type_networking"></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/method.jpg" alt="method"></p><p>设置 <code>root</code> 账户密码</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/root_password.jpg" alt="root_password"></p><p>继续 <code>Next</code></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/choose_service.jpg" alt="choose_service"></p><p>应用配置</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/apply_config.jpg" alt="apply_config"></p><p>显示下图，配置成功</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/config_success.jpg" alt="config_success"></p><p>继续 <code>Next</code></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/config_success.jpg" alt="config_success"></p><p>安装成功</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/success.jpg" alt="success"></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>打开 <code>此电脑</code> &gt; 右键 <code>属性</code> &gt; <code>高级系统设置</code></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/system_setting.png" alt="system_setting"></p><p>打开 <code>环境变量</code> &gt; 系统变量下的 <code>Path</code></p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/setting_path.png" alt="setting_path"></p><p>复制 <code>MySQL</code> 安装路径 <code>D:\development\MySQL\MySQL Server 8.0\bin</code> 打开 <code>Path</code> 新建</p><p>将安装路径复制到 <code>Path</code> 后一路确定 后大功告成  最后一步检验</p><h2 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h2><p>使用 <code>CMD</code> 打开命令窗口后输入 <code>mysql -u root -p</code> 即可输入密码连接</p><blockquote><p>按 Win + R 输入 cmd 回车打开命令窗口</p></blockquote><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsInstallMySQL/mysql_test.jpg" alt="mysql_test"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;从 &lt;a href=&quot;https://dev.mysql.com/downloads/&quot;&gt;传送门&lt;/a&gt; 内寻找安装方式&lt;/p&gt;
&lt;p&gt;&lt;i</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.islu.cn/categories/notes/"/>
    
    
    <category term="MySQL" scheme="https://www.islu.cn/tags/MySQL/"/>
    
    <category term="Windows" scheme="https://www.islu.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Matery主题添加Pjax</title>
    <link href="https://www.islu.cn/posts/MateryAddPjax.html"/>
    <id>https://www.islu.cn/posts/MateryAddPjax.html</id>
    <published>2022-01-23T13:33:03.000Z</published>
    <updated>2023-12-01T13:23:36.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何给matery主题添加Pjax"><a href="#如何给matery主题添加Pjax" class="headerlink" title="如何给matery主题添加Pjax"></a>如何给matery主题添加Pjax</h1><h2 id="Pjax优点"><a href="#Pjax优点" class="headerlink" title="Pjax优点"></a>Pjax优点</h2><ol><li><p>减轻服务端压力</p><blockquote><p>按需请求，每次只需加载页面的部分内容，而不用重复加载一些公共的资源文件和不变的页面结构，大大减小了数据请求量，以减轻对服务器的带宽和性能压力，还大大提升了页面的加载速度。</p></blockquote></li><li><p>优化页面跳转体验</p><blockquote><p>使用pjax后，只刷新部分页面，切换效果更加流畅，而且可以定制过度动画，在等待页面加载的时候体验就比较舒服了。</p></blockquote></li></ol><blockquote><p>我知道你们在意的是教程不是这些啰嗦的废话，下面就是正文</p></blockquote><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="基本了解"><a href="#基本了解" class="headerlink" title="基本了解"></a>基本了解</h3><p>Pjax的使用可以在保证<code>Nav</code> <code>Header</code> <code>Footer</code> 不变的基础上改变 <code>Main</code> 的内容(适用于页面结构相对简单的主体)</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsPowerShellOperationHexo/layout.png" alt="页面基本构成"></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="新建pjax-ejs"><a href="#新建pjax-ejs" class="headerlink" title="新建pjax.ejs"></a>新建pjax.ejs</h4><p>在 <code>_widget</code> 目录下新建 <code>pjax.ejs</code> 文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;% if(theme.pjax)&#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">getScript</span>(<span class="string">&quot;https://cdn.jsdelivr.net/npm/pjax/pjax.min.js&quot;</span>, loadPjax)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">loadPjax</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> pjax = <span class="keyword">new</span> <span class="title class_">Pjax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">selectors</span>: [</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;head title&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;head meta[name=&quot;keywords&quot;]&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;head meta[name=&quot;description&quot;]&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;main#main_wrap&quot;</span></span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">cache</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">cacheBust</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Pjax请求错误时，跳转到404页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pjax:error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (err.<span class="property">request</span>.<span class="property">status</span> === <span class="number">404</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                pjax.<span class="title function_">loadUrl</span>(<span class="string">&#x27;/401.html&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="添加容器"><a href="#添加容器" class="headerlink" title="添加容器"></a>添加容器</h4><p>找到 <code>layout.eje</code> 为 <code>&lt;%- body %&gt;</code> 套一个 <code>&lt;main&gt;</code> 标签</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">&quot;main_wrap&quot;</span>&gt;</span></span><br><span class="line">    &lt;%- body %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="引入pjax-ejs"><a href="#引入pjax-ejs" class="headerlink" title="引入pjax.ejs"></a>引入pjax.ejs</h4><p>找到 <code>layout.ejs</code> 在底部(首次加载没必要优先加载Pjax)添加</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%- partial(&#x27;_widget/pjax&#x27;) %&gt;</span><br></pre></td></tr></table></figure><h4 id="添加pjax开关"><a href="#添加pjax开关" class="headerlink" title="添加pjax开关"></a>添加pjax开关</h4><p>在 <code>themes\_config.yml</code>中添加</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="bug的解决"><a href="#bug的解决" class="headerlink" title="bug的解决"></a>bug的解决</h4><p>由于Pjax会导致容器内的函数不会重载，要重载一下函数</p><p>在此仅提供重载方法，不一一做演示了</p><h5 id="部分修改页面"><a href="#部分修改页面" class="headerlink" title="部分修改页面"></a>部分修改页面</h5><p>由于时间问题，仅提供一些需要修改的 <code>ejs</code> 内容作为参考</p><ol><li>评论页面ejs（我使用的是valine，故我需要将valine.ejs页面进行修改）</li><li>谷歌统计页面（google-analytics.ejs）</li><li>文章目录（post-detail-toc.ejs）</li><li>说说页面（artitalk.ejs）</li><li>标签页面（tags）的词云（tag-wordcloud.ejs）</li><li>分类页面（categories）雷达图(category-radar.ejs)</li><li>归档页面(archives)统计图(post-calendar.ejs)</li><li>关于页面（about）的统计图(post-charts.ejs)</li></ol><blockquote><p>欢迎提交遗漏bug</p></blockquote><h5 id="标签-tags-页面为例"><a href="#标签-tags-页面为例" class="headerlink" title="标签 (tags)页面为例"></a>标签 (tags)页面为例</h5><ol><li><p>当操作完以上步骤后从首页点进标签(tags)页面时会有一下报错</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsPowerShellOperationHexo/error.png" alt="error"></p></li><li><p>打开 <code>tags.ejs</code> 该页面由 <code>tag-cloud</code> <code>tag-wordcloud</code> 两个ejs组成，故要查看这两个 <code>ejs</code> 页面哪里出现了 <code>jQCloud</code> 函数</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsPowerShellOperationHexo/tag_do.png" alt="tag_do"></p></li><li><p>找到bug处进行修改，原页面</p><ol><li><p>原页面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.css.jqcloud) %&gt;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding-bottom: 20px&quot;</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tag-wordcloud&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.jqcloud) %&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &lt;%</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> tagWordArr = [];</span></span><br><span class="line"><span class="language-javascript">    site.<span class="property">tags</span>.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">tag</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        tagWordArr.<span class="title function_">push</span>(&#123;<span class="string">&#x27;text&#x27;</span>: tag.<span class="property">name</span>, <span class="string">&#x27;weight&#x27;</span>: tag.<span class="property">length</span>, <span class="string">&#x27;link&#x27;</span>: <span class="built_in">decodeURI</span>(<span class="title function_">url_for</span>(tag.<span class="property">path</span>))&#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> tagWords = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(tagWordArr);</span></span><br><span class="line"><span class="language-javascript">    %&gt;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#tag-wordcloud&#x27;</span>).<span class="title function_">jQCloud</span>(&lt;%- tagWords %&gt;, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">autoResize</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改后</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.css.jqcloud) %&gt;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#tag-wordcloud</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tag-wordcloud&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">getScript</span>(<span class="string">&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.jqcloud) %&gt;&quot;</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        &lt;%</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> tagWordArr = [];</span></span><br><span class="line"><span class="language-javascript">        site.<span class="property">tags</span>.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">tag</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            tagWordArr.<span class="title function_">push</span>(&#123;<span class="string">&#x27;text&#x27;</span>: tag.<span class="property">name</span>, <span class="string">&#x27;weight&#x27;</span>: tag.<span class="property">length</span>, <span class="string">&#x27;link&#x27;</span>: <span class="built_in">decodeURI</span>(<span class="title function_">url_for</span>(tag.<span class="property">path</span>))&#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> tagWords = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(tagWordArr);</span></span><br><span class="line"><span class="language-javascript">        %&gt;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#tag-wordcloud&#x27;</span>).<span class="title function_">jQCloud</span>(&lt;%- tagWords %&gt;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">autoResize</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改内容</p><blockquote><p>将未重载的函数利用 <code>Jquery</code> 的 <code>getScript</code> 方法进行重载</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">getScript</span>(<span class="string">&quot;文件引用路径&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//重载函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li></ol></li></ol><h5 id="以评论-valine-为例"><a href="#以评论-valine-为例" class="headerlink" title="以评论(valine)为例"></a>以评论(valine)为例</h5><p>打开 <code>valine.ejs</code></p><ul><li><p>原主代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(&#x27;/libs/valine/av-min.js&#x27;) %&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.valine) %&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> metaPlaceholder = &lt;%-  <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(theme.<span class="property">valine</span>.<span class="property">metaPlaceholder</span>) %&gt; ;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//这里要换行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Valine</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"> <span class="attr">el</span>: <span class="string">&#x27;#vcomments&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">appId</span>: <span class="string">&#x27;&lt;%- theme.valine.appId %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">appKey</span>: <span class="string">&#x27;&lt;%- theme.valine.appKey %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">notify</span>: <span class="string">&#x27;&lt;%- theme.valine.notify %&gt;&#x27;</span> === <span class="string">&#x27;true&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">verify</span>: <span class="string">&#x27;&lt;%- theme.valine.verify %&gt;&#x27;</span> === <span class="string">&#x27;true&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">visitor</span>: <span class="string">&#x27;&lt;%- theme.valine.visitor %&gt;&#x27;</span> === <span class="string">&#x27;true&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">avatar</span>: <span class="string">&#x27;&lt;%- theme.valine.avatar %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pageSize</span>: <span class="string">&#x27;&lt;%- theme.valine.pageSize %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">lang</span>: <span class="string">&#x27;&lt;% if (config.language == &quot;zh-CN&quot;) &#123; %&gt;zh-cn&lt;% &#125; else &#123; %&gt;en&lt;% &#125; %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">placeholder</span>: <span class="string">&#x27;&lt;%= theme.valine.placeholder %&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改后代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">getScript</span>(<span class="string">&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(&#x27;/libs/valine/av-min.js&#x27;) %&gt;&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">getScript</span>(<span class="string">&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.valine) %&gt;&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">new</span> <span class="title class_">Valine</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">el</span>: <span class="string">&#x27;#vcomments&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">appId</span>: <span class="string">&#x27;&lt;%- theme.valine.appId %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">appKey</span>: <span class="string">&#x27;&lt;%- theme.valine.appKey %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">notify</span>: <span class="string">&#x27;&lt;%- theme.valine.notify %&gt;&#x27;</span> === <span class="string">&#x27;true&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">verify</span>: <span class="string">&#x27;&lt;%- theme.valine.verify %&gt;&#x27;</span> === <span class="string">&#x27;true&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">visitor</span>: <span class="string">&#x27;&lt;%- theme.valine.visitor %&gt;&#x27;</span> === <span class="string">&#x27;true&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">avatar</span>: <span class="string">&#x27;&lt;%- theme.valine.avatar %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pageSize</span>: <span class="string">&#x27;&lt;%- theme.valine.pageSize %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">lang</span>: <span class="string">&#x27;&lt;% if (config.language == &quot;zh-CN&quot;) &#123; %&gt;zh-cn&lt;% &#125; else &#123; %&gt;en&lt;% &#125; %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">placeholder</span>: <span class="string">&#x27;&lt;%= theme.valine.placeholder %&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><h4 id="页面切换加载动画"><a href="#页面切换加载动画" class="headerlink" title="页面切换加载动画"></a>页面切换加载动画</h4><ol><li><p>在 <code>pjax.ejs</code> 的 <code>script</code>标签中添加以下代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清除时间</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 执行进度条</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ProgressStart</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 设置初始进度</span></span><br><span class="line">    <span class="keyword">var</span> progress = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 创建进度条 及 css样式</span></span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="property">className</span> = <span class="string">&quot;pjax_progress&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">prepend</span>(div);</span><br><span class="line">    <span class="comment">// 定义随机数最大值最小值</span></span><br><span class="line">    <span class="keyword">var</span> max=<span class="number">10</span>,mini=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> result=max-mini;</span><br><span class="line">    <span class="comment">// 清除</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    <span class="comment">// 0.5秒内累加进度</span></span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 随机数</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*result);</span><br><span class="line">        <span class="keyword">var</span> randomResult = num+mini;</span><br><span class="line">        <span class="comment">// 累加</span></span><br><span class="line">        progress+=randomResult</span><br><span class="line">        $queryAll(<span class="string">&quot;.pjax_progress&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">width</span> = progress+<span class="string">&quot;%&quot;</span>;</span><br><span class="line">        <span class="comment">// 当进度达到95%时停止</span></span><br><span class="line">        <span class="keyword">if</span>(progress&gt;<span class="number">95</span>)progress=<span class="number">95</span></span><br><span class="line">    &#125;,<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加载进度条加载完毕</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ProgressFinish</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    <span class="comment">// 页面加载完毕后进度100% 并在0.7秒后删除</span></span><br><span class="line">    <span class="keyword">var</span> progress = $queryAll(<span class="string">&quot;.pjax_progress&quot;</span>);</span><br><span class="line">    progress[<span class="number">0</span>].<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;100%&quot;</span>;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        progress[<span class="number">0</span>].<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(progress[<span class="number">0</span>])</span><br><span class="line">    &#125;, <span class="number">700</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 开始 PJAX 执行的函数</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pjax:send&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 执行进度条</span></span><br><span class="line">    <span class="title class_">ProgressStart</span>()</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// PJAX 完成之后执行的函数，可以和上面的重载放在一起</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pjax:complete&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 加载进度条加载完毕</span></span><br><span class="line">    <span class="title class_">ProgressFinish</span>()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>在 <code>my.css</code> 中添加以下样式代码</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pjax_progress</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">103</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">130deg</span>, <span class="number">#ff0</span>, red);</span><br><span class="line">    <span class="attribute">transition</span>: width .<span class="number">4s</span> ease <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="页面切换加载进度条"><a href="#页面切换加载进度条" class="headerlink" title="页面切换加载进度条"></a>页面切换加载进度条</h4><ol><li><p>在 <code>pjax.ejs</code> 的 <code>script</code>标签中添加以下代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始 PJAX 执行的函数</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pjax:send&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;#loading&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;flex&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// PJAX 完成之后执行的函数，可以和上面的重载放在一起</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pjax:complete&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;#loading&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>在 <code>my.css</code> 中添加以下样式代码</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#loading</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">9999</span>;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#loading</span> <span class="selector-class">.loader</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20em</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#loading</span> <span class="selector-class">.loader</span> <span class="selector-class">.face</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">animation</span>: CW <span class="number">3s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#loading</span> <span class="selector-class">.loader</span> <span class="selector-class">.face</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffd700</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: currentColor transparent transparent currentColor;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0.2em</span> <span class="number">0.2em</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attr">--deg</span>: -<span class="number">45deg</span>;</span><br><span class="line">  <span class="attribute">animation-direction</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#loading</span> <span class="selector-class">.loader</span> <span class="selector-class">.face</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0f0</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: currentColor currentColor transparent transparent;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0.2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0.2em</span>;</span><br><span class="line">  <span class="attr">--deg</span>: -<span class="number">135deg</span>;</span><br><span class="line">  <span class="attribute">animation-direction</span>: reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#loading</span> <span class="selector-class">.loader</span> <span class="selector-class">.face</span> <span class="selector-class">.circle</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0.1em</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="built_in">var</span>(--deg));</span><br><span class="line">  <span class="attribute">transform-origin</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#loading</span> <span class="selector-class">.loader</span> <span class="selector-class">.face</span> <span class="selector-class">.circle</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">0.5em</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">0.5em</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: currentColor;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2em</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">4em</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">6em</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">8em</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">10em</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0.5em</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何给matery主题添加Pjax&quot;&gt;&lt;a href=&quot;#如何给matery主题添加Pjax&quot; class=&quot;headerlink&quot; title=&quot;如何给matery主题添加Pjax&quot;&gt;&lt;/a&gt;如何给matery主题添加Pjax&lt;/h1&gt;&lt;h2 id=&quot;Pjax优</summary>
      
    
    
    
    <category term="经验分享" scheme="https://www.islu.cn/categories/experiences/"/>
    
    
    <category term="Hexo" scheme="https://www.islu.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对象的继承</title>
    <link href="https://www.islu.cn/posts/JavaScriptInheritanceOfObjects.html"/>
    <id>https://www.islu.cn/posts/JavaScriptInheritanceOfObjects.html</id>
    <published>2021-11-16T16:02:19.000Z</published>
    <updated>2023-12-01T13:23:36.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-对象的继承"><a href="#JavaScript-对象的继承" class="headerlink" title="JavaScript 对象的继承"></a>JavaScript 对象的继承</h1><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>基于原型链，即把一个对象的原型设置为另一个对象的实例，那么这个对象实例也就拥有了另一个对象上的属性。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nationality</span> = <span class="string">&quot;中国🇨🇳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getNational</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;中国🇨🇳&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">getNational</span>() _<span class="comment">//中国🇨🇳_</span></span><br><span class="line">_<span class="string">``</span><span class="string">`_</span></span><br><span class="line"><span class="string">原型和实例的关系</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">JavaScript</span></span><br><span class="line">s <span class="keyword">instanceof</span> <span class="title class_">Son</span> _<span class="comment">//true_</span></span><br><span class="line">s <span class="keyword">instanceof</span> <span class="title class_">Father</span> _<span class="comment">//true_</span></span><br><span class="line">_<span class="string">``</span><span class="string">`_</span></span><br><span class="line"><span class="string">子类也可以继续添加其他的方法，但是需要注意，子类添加方法的代码要写在替换原型的代码之后</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">JavaScript</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nationality</span> = <span class="string">&quot;中国🇨🇳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getNational</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;中国🇨🇳&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line">_<span class="comment">// 子类添加其他方法_</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">learn</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;好好学习天天向上&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><p>使用父类的实例设置为子类的原型，也就意味着父类的属性变成了子类原型上共享的属性了。我们在之前将面向对象时，说过，对象的属性最好定义在构造函数中，需要共享的引用类型的属性再定义在原型上。为了解决这个问题，我们可以在子类的构造函数中调用父类的构造函数，这样父类的属性就会变成子类构造函数上的属性，子类的实例对象也就有了独立的属性：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nationality</span> = <span class="string">&quot;中国🇨🇳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">  _<span class="comment">// 在子类的构造函数中调用父类构造函数_</span></span><br><span class="line">  <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">传递参数：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nationality</span> = <span class="string">&quot;中国🇨🇳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="comment">// 在子类的构造函数中调用父类构造函数</span></span><br><span class="line">  <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合继承模式"><a href="#组合继承模式" class="headerlink" title="组合继承模式"></a>组合继承模式</h3><p>结合原型链和构造函数，原型链实现对原型属性和方法的基础，构造函数实现实例方法的继承：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nationality</span> = <span class="string">&quot;中国🇨🇳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getNational</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;中国🇨🇳&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  _<span class="comment">// 在子类的构造函数中调用父类构造函数_</span></span><br><span class="line">  <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span>;</span><br></pre></td></tr></table></figure><p><strong>这种方法也是推荐的实现继承的方式</strong></p><h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">origin</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> clone = <span class="title class_">Object</span>(origin)</span><br><span class="line">  clone.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;davie&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="title function_">createPerson</span>(person)</span><br><span class="line">p2.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><p>createPerson 方法返回了一个新的对象，具有 person 的属性，而且还有自己的方法。<br>当继承的父对象不是自定义类型和构造函数的情况下，可以采用寄生继承模式。</p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>组合继承模式是最常用的模式，但也不是完美的。组合继承会执行两次父类构造函数。一次是在子类构造函数中，一次在创建子类原型的时候。结合寄生模式，可以进一步优化：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_inherit</span>(<span class="params">subClass,supClass</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = <span class="title class_">Object</span>(supClass.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">  prototype.<span class="property">constructor</span> = subClass</span><br><span class="line">  subClass.<span class="property"><span class="keyword">prototype</span></span> = prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">  <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">_inherit</span>(<span class="title class_">Son</span>,<span class="title class_">Father</span>)</span><br></pre></td></tr></table></figure><p>这种方法的高效之处体现在只调用了一次父类构造函数。因此避免了在子类的原型上添加不必要的、多余的属性。同时原型链还能保持不变，因此可以正常使用 instanceof 判断类型。</p><h3 id="ES6-中类的继承"><a href="#ES6-中类的继承" class="headerlink" title="ES6 中类的继承"></a>ES6 中类的继承</h3><p>在 ES6 中，有了 class(JavaScript 的 class 只是一种语法糖，覆盖在基于构造函数和原型的模式上)，我们就可以使用 extends 来实现类的继承了：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="comment">// 在子类中通过super函数调用父类构造函数</span></span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">learn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;好好学习天天向上&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;Davie&quot;</span>)</span><br><span class="line">s.<span class="title function_">sayHi</span>()</span><br><span class="line">s.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><p>子类的构造函数可以不写。但是如果要写的话，一定要记得执行 super 函数。super 函数用来调用父类的构造函数。否则会报错：</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="JavaScriptInheritanceOfObjects/error.jpg" alt="error"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-对象的继承&quot;&gt;&lt;a href=&quot;#JavaScript-对象的继承&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 对象的继承&quot;&gt;&lt;/a&gt;JavaScript 对象的继承&lt;/h1&gt;&lt;h3 id=&quot;原型链继承&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.islu.cn/categories/notes/"/>
    
    
    <category term="JavaScript" scheme="https://www.islu.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript闭包</title>
    <link href="https://www.islu.cn/posts/JavaScriptClosure.html"/>
    <id>https://www.islu.cn/posts/JavaScriptClosure.html</id>
    <published>2021-11-14T16:02:19.000Z</published>
    <updated>2023-12-01T13:23:36.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h2><p>先来说下概念：</p><blockquote><p>一个函数和对其周围状态（<strong>lexical environment，词法环境</strong>）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是<strong>闭包</strong>（<strong>closure</strong>）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。</p></blockquote><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>说到闭包，必须要说下作用域，看下面代码 👇：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;Davie&quot;</span>; <span class="comment">// name 是一个被 init 创建的局部变量</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">displayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// displayName() 是内部函数，一个闭包</span></span><br><span class="line">    <span class="title function_">alert</span>(name); <span class="comment">// 使用了父函数中声明的变量</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">displayName</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><p><code>init()</code> 创建了一个局部变量 <code>name</code> 和一个名为 <code>displayName()</code> 的函数。<code>displayName()</code> 是定义在 <code>init()</code> 里的内部函数，并且仅在 <code>init()</code> 函数体内可用。<code>displayName()</code> 没有自己的局部变量。然而，因为它可以访问到外部函数的变量，所以 <code>displayName()</code> 可以使用父函数 <code>init()</code> 中声明的变量 <code>name</code> 。</p><p>运行该代码后发现， <code>displayName()</code> 函数内的 <code>alert()</code> 语句成功显示出了变量 <code>name</code> 的值（该变量在其父函数中声明）。词法（lexical）一词指的是，<strong>词法作用域根据源代码中声明变量的位置来确定该变量在何处可用</strong>。嵌套函数可访问声明于它们外部作用域的变量。</p><p>重要的话说三遍：</p><p><strong>词法作用域根据源代码中声明变量的位置来确定该变量在何处可用</strong></p><p><strong>词法作用域根据源代码中声明变量的位置来确定该变量在何处可用</strong></p><p><strong>词法作用域根据源代码中声明变量的位置来确定该变量在何处可用</strong></p><p>一定是声明变量的位置，而不是调用的位置。</p><h2 id="3-闭包"><a href="#3-闭包" class="headerlink" title="3. 闭包"></a>3. 闭包</h2><p>再来看一段代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Davie&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">displayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> displayName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;大卫&quot;</span></span><br><span class="line"><span class="keyword">var</span> myFunc = <span class="title function_">makeFunc</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>();</span><br></pre></td></tr></table></figure><p>代码运行结果是 “Davie”，<code>displayName</code>函数形成一个闭包，如果没有<code>displayName</code>函数，<code>makeFunc</code>函数执行完之后，name 属性就不能再被访问。而由于<code>displayName</code>的存在，维持了对<code>name</code>的引用，因此，当 <code>myFunc</code> 被调用时，变量 <code>name</code> 仍然可用。<br>​</p><p>另一个有趣的代码：<br>​</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeAdder</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add5 = <span class="title function_">makeAdder</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> add10 = <span class="title function_">makeAdder</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add5</span>(<span class="number">2</span>));  <span class="comment">// 7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add10</span>(<span class="number">2</span>)); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><p><code>makeAdder</code>函数在执行完毕之后，参数<code>x</code>仍然存在，保留在内存中，当在此执行内部的闭包函数时，就可以被内部函数访问到。</p><h2 id="使用闭包实现模块化"><a href="#使用闭包实现模块化" class="headerlink" title="使用闭包实现模块化"></a>使用闭包实现模块化</h2><p>在一些编程语言，比如 Java 中，是支持将方法声明为私有的，即它们只能被同一个类中的其它方法所调用。</p><p>而 JavaScript 没有这种原生支持（TypeScript 已经支持），但我们可以使用闭包来模拟私有方法。私有方法不仅仅有利于限制对代码的访问：还提供了管理全局命名空间的强大能力，避免非核心的方法弄乱了代码的公共接口部分。</p><p>下面的示例展现了如何使用闭包来定义公共函数，并令其可以访问私有函数和变量。这个方式也称为<strong>模块模式</strong>：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Counter</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _privateCounter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeBy</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    _privateCounter += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> _privateCounter;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br><span class="line"><span class="title class_">Counter</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="title class_">Counter</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 2 */</span></span><br><span class="line"><span class="title class_">Counter</span>.<span class="title function_">decrement</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 1 */</span></span><br></pre></td></tr></table></figure><p>通过立即执行函数创建了一个模块。模块内部的两个变量<code>privateCounter</code>和<code>changeBy</code>都不能再外部访问到，于是提供了三个函数用于在外部访问。这三个公共函数是共享同一个环境的闭包。多亏 JavaScript 的词法作用域，它们都可以访问 <code>privateCounter</code> 变量和 <code>changeBy</code> 函数。</p><p>把上面的代码稍加改造，变成有名函数，通过执行这个函数得到多个计数器：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> makeCounter = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> privateCounter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeBy</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    privateCounter += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> privateCounter;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Counter1</span> = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Counter2</span> = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 2 */</span></span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">decrement</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 1 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter2</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br></pre></td></tr></table></figure><p>两个计数器 <code>Counter1</code> 和 <code>Counter2</code> 是如何维护它们各自的独立性的。每个闭包都是引用自己词法作用域内的变量 <code>privateCounter</code> 。</p><p>每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的词法环境。然而在一个闭包内对变量的修改，不会影响到另外一个闭包中的变量。</p><blockquote><p>通过这种方式可以实现很多与面向对象编程相关的好处 —— 特别是数据隐藏和封装。</p></blockquote><h2 id="一个常见错误"><a href="#一个常见错误" class="headerlink" title="一个常见错误"></a>一个常见错误</h2><p>我们在开发中，经常会遇到一个问题就是通过循环的方式给元素添加事件：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;html&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;css&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需求是给每一个<code>p</code>标添加点击事件，当点击<code>p</code>标签时，使用<code>alert</code>弹出里面的文字内容：</p><p>通过 for 循环添加：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; list.<span class="property">length</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">var</span> item = list[i]</span><br><span class="line">  item.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="title function_">alert</span>(item.<span class="property">innerText</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这样写的话，执行代码会发现不管点击那个元素，弹出的始终是”JavaScript”。</p><p>原因是赋值给 onclick 的是闭包。这三个闭包在循环中被创建，但他们共享了同一个词法作用域，在这个作用域中存在一个变量 item。变量 item 使用 var 进行声明，由于变量提升，所以具有函数作用域。由于循环在事件触发之前早已执行完毕，变量对象<code>item</code>（被三个闭包所共享）的值已经变成了最后一个<code>p</code>。</p><p>解决这个问题的办法是使用工厂模式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">showText</span>(<span class="params">item</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="title function_">alert</span>(item.<span class="property">innerText</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; list.<span class="property">length</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">var</span> item = list[i]</span><br><span class="line">  item.<span class="property">onclick</span> = <span class="title function_">showText</span>(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的回调不再共享同一个环境， showText 函数为每一个回调创建一个新的词法环境。三个闭包中，三个 item 会被单独保存下来。</p><p>当然使用匿名函数也可以：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>;i++)&#123;</span><br><span class="line">   (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">var</span> item = list[i]</span><br><span class="line">     item.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="title function_">alert</span>(item.<span class="property">innerText</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>当然，使用 ES6 的 let 关键字就单间多了：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> item = list[i];</span><br><span class="line">  item.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(item.<span class="property">innerText</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 let 定义 item，每个闭包都绑定了块作用域的变量，这意味着不再需要额外的闭包。</p><p>另外有一种方法是使用 forEach 函数：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用forEach方法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>().<span class="property">forEach</span>.<span class="title function_">call</span>(list, <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  item.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(item.<span class="property">innerText</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h2><p>闭包虽然有很多好处，然而也要谨慎使用，由于闭包会保存变量，不会立即被垃圾回收机制处理，所以创建过多的闭包可能会造成内存泄漏。</p><p>例如，在创建新的对象或者类时，方法通常应该关联于对象的原型，而不是定义到对象的构造器中。原因是这将导致每次构造器被调用时，方法都会被重新赋值一次（也就是说，对于每个对象的创建，方法都会被重新赋值）。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, message</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">message</span> = message.<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">    </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getMessage</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，我们并没有利用到闭包的好处，因此可以避免使用闭包。修改成如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, message</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">message</span> = message.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyObject</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyObject</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getMessage</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li><li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>闭包能够读取另一个函数作用域的变量的函数。</p><p>闭包具有：封闭性、持久性的有点。</p><p>同时又由于持久性，处理不当易造成内存泄漏。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h1&gt;&lt;h2 id=&quot;什么是闭包&quot;&gt;&lt;a href=&quot;#什么是闭包&quot; class=&quot;headerlink&quot; title=&quot;什么是闭包&quot;&gt;&lt;/a&gt;什么是闭</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.islu.cn/categories/notes/"/>
    
    
    <category term="JavaScript" scheme="https://www.islu.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript类型隐式转换</title>
    <link href="https://www.islu.cn/posts/JavaScriptDataTypeTransition.html"/>
    <id>https://www.islu.cn/posts/JavaScriptDataTypeTransition.html</id>
    <published>2021-09-05T21:23:09.000Z</published>
    <updated>2023-12-01T13:23:36.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-数据类型隐式转换"><a href="#JavaScript-数据类型隐式转换" class="headerlink" title="JavaScript 数据类型隐式转换"></a>JavaScript 数据类型隐式转换</h1><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>在讲 JavaScript 的数据类型隐式转换前，我们先看道面试题：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>) == <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; == <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] == ![]);</span><br></pre></td></tr></table></figure><p>结果是什么呢？</p><p>先把结果写下来，放在一边，然后继续看</p><h2 id="字面量形式、包装器方式，new-方式的区别"><a href="#字面量形式、包装器方式，new-方式的区别" class="headerlink" title="字面量形式、包装器方式，new 方式的区别"></a>字面量形式、包装器方式，new 方式的区别</h2><p>创建字符串的三种方式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Davie&quot;</span>; <span class="comment">//申明的是一个string类型，它是一个基本类型</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="title class_">String</span>(<span class="string">&quot;Davie&quot;</span>); <span class="comment">// String()是一个包装类，用于将参数转换成string类型</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Davie&quot;</span>); <span class="comment">//采用new方式时创建了一个object类型</span></span><br></pre></td></tr></table></figure><p>使用 typeof 验证上面的结论</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Davie&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a); <span class="comment">//string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">String</span>(a)); <span class="comment">//string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">String</span>(a)); <span class="comment">//object</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-的数据类型"><a href="#JavaScript-的数据类型" class="headerlink" title="JavaScript 的数据类型"></a>JavaScript 的数据类型</h2><p>JavaScript 的数据类型之前已经讲过了，忘记的小伙伴出门左转，查看<a href="#"><strong>搞懂 JavaScript 的数据类型</strong></a></p><h2 id="4-各种类型隐式转换到布尔类型对照表"><a href="#4-各种类型隐式转换到布尔类型对照表" class="headerlink" title="4. 各种类型隐式转换到布尔类型对照表"></a>4. 各种类型隐式转换到布尔类型对照表</h2><table><thead><tr><th>数据类型</th><th>转换为 true 的值</th><th>转换为 false 的值</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>任何非空字符串</td><td>“” 空字符串</td></tr><tr><td>Number</td><td>任何非零数字</td><td>0 和 NaN</td></tr><tr><td>Object</td><td>任何对象</td><td>null</td></tr><tr><td>Undefined</td><td>不适用</td><td>undefined</td></tr></tbody></table><h2 id="转换规则"><a href="#转换规则" class="headerlink" title="!转换规则"></a><code>!</code>转换规则</h2><p><code>!</code>会将后面的数据先转成布尔值，然后取反。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a;</span><br><span class="line">var r = !!a;</span><br><span class="line">console.log(r) //false</span><br><span class="line"></span><br><span class="line">!!&#123;&#125; // true</span><br><span class="line">!!undefined // false</span><br><span class="line">!!nul // false</span><br><span class="line">!!NaN //fales</span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="==比较"></a><code>==</code>比较</h2><blockquote><p>比较操作符会为两个不同类型的操作数转换类型，然后进行严格比较。当两个操作数都是对象时，JavaScript 会比较其内部引用，当且仅当他们的引用指向内存中的相同对象（区域）时才相等，即他们在栈内存中的引用地址相同。  —- <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators">引用自 MDN</a></p></blockquote><h4 id="1-类型相同的情况"><a href="#1-类型相同的情况" class="headerlink" title="1. 类型相同的情况"></a>1. 类型相同的情况</h4><ul><li>如果比较的是两个对象，则比较两个对象的指针是否指向同一个对象，例如：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = &#123;&#125;</span><br><span class="line">var b = &#123;&#125;</span><br><span class="line">a==b //false</span><br></pre></td></tr></table></figure><p>很明显，<code>a</code>和<code>b</code>在堆内存中是两个对象。二另一种情况：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = &#123;&#125;</span><br><span class="line">var b = a;</span><br><span class="line">a==b //true</span><br></pre></td></tr></table></figure><p>这时，<code>a</code>和<code>b</code>就指向了同一个对象，所以相等。</p><ul><li>其它的基本类型，如果是相同类型，则直接进行严格比较就好，没什么好说的。</li></ul><h4 id="2-类型不同的情况"><a href="#2-类型不同的情况" class="headerlink" title="2. 类型不同的情况"></a>2. 类型不同的情况</h4><p>如果两边类型不同，则两边都<strong>尝试转成 number 类型</strong>。对于引用类型，先调用<code>valueOf()</code>,如果能转成数字，则进行比较。不能转成数字就调用<code>toString()</code>方法转成字符串。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == <span class="literal">false</span>); <span class="comment">//false,&#x27;123&#x27;转成数字是123,右侧转成数字是0,最终比较123==0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == <span class="number">123</span>); <span class="comment">//true,右边是数字，把左 边转成数字123</span></span><br></pre></td></tr></table></figure><p>如果有一边是 object 类型：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == <span class="number">123</span>); <span class="comment">//true,a.valueOf()结果就是数字123，最终比较的是123==123</span></span><br></pre></td></tr></table></figure><p>再看一个：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125; <span class="variable language_">console</span>.<span class="title function_">log</span>(a == <span class="number">1</span>)</span><br><span class="line"><span class="comment">//上面a==1在js解释引擎中的执行过程如下:</span></span><br><span class="line"><span class="comment">// a.valueOf()获取到的不是基本类型，调用a.toString()得到&#x27;[object Object]&#x27;&#x27;[object Object]&#x27;==1;</span></span><br><span class="line"><span class="comment">// 两边类型不致，左侧转成数字NaN==1;</span></span><br><span class="line"><span class="comment">// false,NaN跟任何类型比较都为false</span></span><br></pre></td></tr></table></figure><h4 id="3-null、NaN、undefined"><a href="#3-null、NaN、undefined" class="headerlink" title="3. null、NaN、undefined"></a>3. null、NaN、undefined</h4><p>null、NaN、undefined 和 string、number、boolean、object 类型比较时，都不做隐式转换，比较的结果直接为 false。但是需要注意以下几个规则：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="literal">null</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">null</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">//true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">undefined</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="4-面试题解析"><a href="#4-面试题解析" class="headerlink" title="4. 面试题解析"></a>4. 面试题解析</h4><p>搞清楚规则后，开头的面试题就很容易了：</p><p>第一题：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//问题1：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>) == <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// step1:右侧转成数字1,变成：new String(&#x27;abc&#x27;)==1</span></span><br><span class="line"><span class="comment">// step2 new String(&#x27;abc&#x27;).valueOf()不是数字也不是字符串，再调用toString()&#x27;[object Object]&#x27; == 1</span></span><br><span class="line"><span class="comment">// step3:字符串转数字NaN == 1</span></span><br><span class="line"><span class="comment">// false,NaN和任何类型比较都为false</span></span><br></pre></td></tr></table></figure><p>第二题：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//问题2：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; == <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//step1:右侧转成数字&#123;&#125; == 1</span></span><br><span class="line"><span class="comment">// step2 &#123;&#125;.valueOf()不是数字也不是字符串，再调用toString()&#x27;[object Object]&#x27; ==1</span></span><br><span class="line"><span class="comment">// step3:字符串转数字NaN == 1</span></span><br><span class="line"><span class="comment">// false,NaN和任何类型比较都为false</span></span><br></pre></td></tr></table></figure><p>第三题：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//问题3:</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] == ![]);</span><br><span class="line"><span class="comment">//step1:!优先级比==高，先转右边,[]是对象类型，转成布尔值为true,!true就是false[]==false</span></span><br><span class="line"><span class="comment">// step2:右侧转成数字为0[]==0</span></span><br><span class="line"><span class="comment">// step3:左侧是一个对象，valueOf()转出来不是字符也不是字符串，调用toString()，得到空字符串&#x27;&#x27; == 0</span></span><br><span class="line"><span class="comment">// step4:字符串转成数字0 == 0 //true</span></span><br></pre></td></tr></table></figure><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h4><ul><li>类型相同<ul><li>基本类型，直接比较值</li><li>引用类型比较指针</li></ul></li><li>类型不同，尝试转成 number 类型，<ul><li>先调用<code>valueOf()</code>转成<code>number</code></li><li>不行就再用<code>toString()</code>方法转成<code>string</code></li></ul></li><li>null、NaN、undefined 单独一套规则</li></ul><h2 id="比较运算符-gt-lt"><a href="#比较运算符-gt-lt" class="headerlink" title="比较运算符 &gt; &lt;"></a>比较运算符 <code>&gt;</code> <code>&lt;</code></h2><p>来，在来看一道题：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&#x27;666&#x27; &lt; &#x27;7&#x27;)</span><br></pre></td></tr></table></figure><p>正确答案是 <code>true</code></p><p>这是因为<strong>字符串类型比较大小时，不进行类型转换，而是逐位比较 ascii 码，第 1 位不同则返回结果，否则继续比较第 2 位，直到某一位不同为止</strong>。</p><p>在比如使用数组的 sort 方法排序：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">100</span>].<span class="title function_">sort</span>();</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">6</span>];</span><br></pre></td></tr></table></figure><p>原因是 sort()方法默认的比较规则会先把每个元素转成字符串，然后比较字符串的 ascii 码来确定先后顺序。</p><h2 id="加号"><a href="#加号" class="headerlink" title="加号+"></a>加号<code>+</code></h2><p><code>+</code>运算符即可以对两个数相加，也可以连接字符串，那如果是[1,2,3]+4 这种情况下又会发生什么呢？这就需要我们了解相应的规则，为了方便描述，我们把+号左侧的值叫做 A，右侧的叫做 B：<br>第一步：如果 A 和 B 都是 number 类型，直接相加；<br>第二步：接下来看 A 或 B 中是否有一个是否为 string 类型，如果有，则将另一个也转成字符串，然后连接；<br>第三步：既不是 number,也不是 string,则按如下规则转换：</p><ol><li> 能转换成数字，返回之</li><li> 否则调用 valueOf()，如果执行结果是基本类型，返回之；</li><li> 否则调用 toString()，如果执行结果是基础类型，返回之；</li><li> 无法得到原始值，抛异常。</li></ol><h2 id="减号"><a href="#减号" class="headerlink" title="减号-"></a>减号<code>-</code></h2><p>除了加号外，减号也很神奇。</p><p>使用减号在做非数字类型的运算时，也会发生隐式类型转换.来看下面几个例子：</p><ol><li>true 会转换成 1</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> - <span class="literal">true</span>; <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><ol start="2"><li>‘’空字符串、null 转成 0</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 - &#x27;&#x27; //55 - null //5</span><br></pre></td></tr></table></figure><ol start="3"><li>undefined 和非空字符串转成 NaN</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 - undefined // NaN5 - &#x27;a&#x27; // NaN</span><br></pre></td></tr></table></figure><ol start="4"><li>可以转成数字的字符串转成数字</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 - &#x27;1&#x27;  //4</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-数据类型隐式转换&quot;&gt;&lt;a href=&quot;#JavaScript-数据类型隐式转换&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 数据类型隐式转换&quot;&gt;&lt;/a&gt;JavaScript 数据类型隐式转换&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.islu.cn/categories/notes/"/>
    
    
    <category term="JavaScript" scheme="https://www.islu.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数据类型判断</title>
    <link href="https://www.islu.cn/posts/JavaScriptDataType.html"/>
    <id>https://www.islu.cn/posts/JavaScriptDataType.html</id>
    <published>2021-09-04T13:42:25.000Z</published>
    <updated>2023-12-01T13:23:36.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-数据类型判断"><a href="#JavaScript-数据类型判断" class="headerlink" title="JavaScript 数据类型判断"></a>JavaScript 数据类型判断</h1><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>使用 typeof 判断数据类型</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">1</span>); <span class="comment">//number</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">NaN</span>); <span class="comment">//number</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;1&quot;</span>); <span class="comment">//string</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>); <span class="comment">//boolean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s); <span class="comment">//Symbol</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">islu</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is a function!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> islu); <span class="comment">//function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;闲花手札&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> obj); <span class="comment">//object</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">//object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> array); <span class="comment">//object</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>使用 typeof 可以检测大部分的基本类型。但无法检测出来 null，会认为是对象。</li><li>NaN 也会认为是 number。</li><li>可以检测出函数，但是对象数组和对象无法区分。</li></ol></blockquote><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>instanceof 可以用来判断对象是否是某个类的实例。instanceof 的实现原理出门左转查看<strong>手撕 instanceof</strong></p><p>简单说就是左边对象的原型(通过<code>.__proto__</code>访问)是否和右边对象的原型相等（通过<code>.prototype</code>访问），如果相等则返回 true。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">123</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date <span class="keyword">instanceof</span> <span class="title class_">Date</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn <span class="keyword">instanceof</span> <span class="title class_">Function</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>);</span><br></pre></td></tr></table></figure><p>再来看另外一种情况:</p><p>在 a.html 中定义了数组 a:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// a.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后通过 iframe 引入 main.html 页面：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// main.html</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;a.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> frame = <span class="variable language_">window</span>.<span class="property">frames</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> a = frame.<span class="property">a</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">constructor</span> === <span class="title class_">Array</span>); <span class="comment">//false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">instanceof</span> frame.<span class="property">Array</span>); <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 main.html 页面通过 iframe 获取到 a 页面的数组检测，发现 a 不是 Array 的实例对象，这是什么原因呢？</p><p>其实 iframe 之间不会共享原型链, 因为他们有独立的执行环境, 所以 frame a 中的数组 a 不会是本执行环境的实例对象.</p><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>使用构造函数判断类型：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Davie&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;Davie&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> sy = <span class="title class_">Symbol</span>(<span class="string">&quot;Davie&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bool.<span class="property">constructor</span> === <span class="title class_">Boolean</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="property">constructor</span> === <span class="title class_">Number</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">constructor</span> === <span class="title class_">String</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">constructor</span> === <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">constructor</span> === <span class="title class_">Object</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="property">constructor</span> === <span class="title class_">Function</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sy.<span class="property">constructor</span> === <span class="title class_">Symbol</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">constructor</span> === <span class="title class_">Student</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>undefined 和 null 没有 contructor 属性,所以 constructor 不能判断 undefined 和 null</li><li>使用 constructor 判断类型是不安全的，因为 contructor 的指向是可以改变的</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="property">constructor</span> = <span class="title class_">Object</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">constructor</span> === <span class="title class_">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="特性嗅探"><a href="#特性嗅探" class="headerlink" title="特性嗅探"></a>特性嗅探</h2><p>或者一些特有的方法，比如数组特有的 sort，slice 等：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr.<span class="property">sort</span> === <span class="string">&quot;function&quot;</span>);</span><br></pre></td></tr></table></figure><p>但是这种方式也不是特别牢靠，因为很难保证其他对象里面没有这些方法。</p><h2 id="万能方法"><a href="#万能方法" class="headerlink" title="万能方法"></a>万能方法</h2><p>在任何值上调用 Object 原生的 toString() 方法，都会返回一个 [object NativeConstructorName] 格式的字符串。<br><strong>需要注意的是，它不能检测非原生构造函数的构造函数名。</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>);</span><br><span class="line">(<span class="string">&quot;[object Number]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">NaN</span>);</span><br><span class="line">(<span class="string">&quot;[object Number]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">(<span class="string">&quot;[object String]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>);</span><br><span class="line">(<span class="string">&quot;[object Boolean]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>);</span><br><span class="line">(<span class="string">&quot;[object Undefined]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>);</span><br><span class="line">(<span class="string">&quot;[object Null]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Symbol</span>());</span><br><span class="line">(<span class="string">&quot;[object Symbol]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(foo);</span><br><span class="line">(<span class="string">&quot;[object Function]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">(<span class="string">&quot;[object Array]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;);</span><br><span class="line">(<span class="string">&quot;[object Object]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="regexp">/\d+/</span>);</span><br><span class="line">(<span class="string">&quot;[object RegExp]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(div);</span><br><span class="line">(<span class="string">&quot;[object HTMLDivElement]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">arguments</span>;</span><br><span class="line">  &#125;)()</span><br><span class="line">);</span><br><span class="line">(<span class="string">&quot;[object Arguments]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Error</span>()); <span class="comment">// =&gt; &quot;[object Error]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">// =&gt; &quot;[object Date]&quot;</span></span><br></pre></td></tr></table></figure><p>从上面的例子可以看到，Object.prototype.toString 方法能有效弥补 typeof 不能很好区分<strong>数组</strong>、<strong>对象</strong>和<strong>函数</strong>的短板。</p><p>每个类在内部都有一个 [[Class]] 属性，这个属性中就指定了上述字符串中的构造函数名。</p><p>Object.prototype.toString 的原理是当调用的时候, 就取值内部的 [[Class]] 属性值, 然后拼接成 ‘[object ‘ + [[Class]] + ‘]’ 这样的字符串并返回. 然后我们使用 call 方法来获取任何值的数据类型。</p><h2 id="检测函数"><a href="#检测函数" class="headerlink" title="检测函数"></a>检测函数</h2><p><strong>Array.isArray()</strong></p><p>用于确定传递的值是否是一个 Array。如果对象是 Array，则返回 true，否则为 false。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p><strong>判断是否是 DOM 元素</strong></p><p>在实际项目里面, 有时或许我们需要判断是否是 DOM 元素对象, 那么在判断的时候利用的是 DOM 对象特有的 nodeType 属性:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">isElement</span>: <span class="keyword">function</span>(<span class="params">obj</span>)&#123;  <span class="keyword">return</span> !!(obj &amp;&amp; obj.<span class="property">nodeType</span> === <span class="number">1</span>);&#125;</span><br></pre></td></tr></table></figure><p><strong>判断是否是对象</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">isObject</span>: <span class="keyword">function</span>(<span class="params">obj</span>)&#123;  <span class="keyword">var</span> type = <span class="keyword">typeof</span> obj;  <span class="keyword">return</span> type === <span class="string">&#x27;function&#x27;</span> || <span class="keyword">typeof</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class="literal">null</span>;&#125;</span><br></pre></td></tr></table></figure><p>这里的对象是狭义的, 是通常所指的 key-value 型的集合, 或者是 function 函数并且不为 null.</p><p><strong>判断是否是 arguments 对象</strong></p><p>判断一个对象是不是 arguments 对象可以通过 Object.prototype.toString 来判断, 但是低版本的浏览器不支持, 他们返回的是 [object Object], 所以需要兼容:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">isArguments</span>: <span class="keyword">function</span>(<span class="params">obj</span>)&#123;  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Arguments]&#x27;</span> || (obj != <span class="literal">null</span> &amp;&amp; <span class="title class_">Object</span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj, <span class="string">&#x27;callee&#x27;</span>));&#125;</span><br></pre></td></tr></table></figure><p>兼容做法原理是通过对象的 hasOwnProperty 方法来判断对象是否拥有 callee 属性从而判断是不是 arguments 对象.</p><p><strong>isNaN()和 Number.isNaN</strong></p><p>isNaN 函数可以检测某个值是否是 NaN：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="title class_">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但是：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="literal">undefined</span>); <span class="comment">// trueisNaN(&#123;&#125;); // trueisNaN([]); // false</span></span><br></pre></td></tr></table></figure><p>只要传入的参数不是数字，都会返回 true,但是数组会返回 false，所以任然无法很好进行区分。</p><p>ES6 为了修正这个 BUG，引入了 Number.isNaN()</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;A String&quot;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="literal">undefined</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(&#123;&#125;); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">1</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>([]); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>没有 ES6 的情况下，可以采用以下 polyfill</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title class_">Number</span>.<span class="property">isNaN</span>) &#123;</span><br><span class="line">  <span class="title class_">Number</span>.<span class="property">isNaN</span> = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> n === <span class="string">&quot;number&quot;</span> &amp;&amp; <span class="variable language_">window</span>.<span class="built_in">isNaN</span>(n);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-数据类型判断&quot;&gt;&lt;a href=&quot;#JavaScript-数据类型判断&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 数据类型判断&quot;&gt;&lt;/a&gt;JavaScript 数据类型判断&lt;/h1&gt;&lt;h2 id=&quot;typeo</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.islu.cn/categories/notes/"/>
    
    
    <category term="JavaScript" scheme="https://www.islu.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>windows右键新建.md文件</title>
    <link href="https://www.islu.cn/posts/WindowsNewAddMD.html"/>
    <id>https://www.islu.cn/posts/WindowsNewAddMD.html</id>
    <published>2021-08-16T10:24:48.000Z</published>
    <updated>2023-12-01T13:23:36.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows-下右键新建-md-文件"><a href="#windows-下右键新建-md-文件" class="headerlink" title="windows 下右键新建.md 文件"></a>windows 下右键新建.md 文件</h1><p>原本创建.md 文件需要首先打开 markdown 文本编辑器，如 Typora，或者新建.txt 文件然后修改后缀名，本文介绍了如何在 Windows 操作系统中添加右键创建.md 文件的方法</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsNewAddMD/result.png" alt="result"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="打开注册表"><a href="#打开注册表" class="headerlink" title="打开注册表"></a>打开注册表</h3><ol><li><code>CMD+R</code>，打开运行对话框</li><li>输入<code>regedit</code>，打开注册表编辑器</li></ol><h3 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h3><ol><li><p>在<code>计算机&gt;HKEY_CLASSES_ROOT</code>右键查找，输入<code>Typora</code>，勾选项，取消勾选值和数据<br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsNewAddMD/ModifyingRegistry.png" alt="ModifyingRegistry"></p></li><li><p>确认运行的程序名字，我的电脑如图所示，运行文件是<code>Typora.exe</code><br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsNewAddMD/operation_typora.png" alt="operation_typora"></p><blockquote><p>如果使用的是 markdownpad 或者其他编辑器，同理</p></blockquote></li><li><p> 在磁盘任意位置新建一个文件，后缀为<code>.reg</code></p></li><li><p> 打开编辑刚刚创建好的注册表文件，写入以下内容：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_CLASSES_ROOT\.md]</span><br><span class="line">@=&quot;Typora.exe&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\.md\ShellNew]</span><br><span class="line">&quot;NullFile&quot;=&quot;&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\Typora.exe]</span><br><span class="line">@=&quot;Markdown&quot;</span><br></pre></td></tr></table></figure><blockquote><p><code>@=&quot;Typora.exe&quot;</code> 代表的是指定.md 文件的运行程序</p><p><code>@=&quot;Markdown&quot;</code> 代表的是右键时默认的文件名字，这样写新建为<code>新建</code>Markdown.md<code>文件</code></p><p>且右键菜单中显示<code>MarkDown</code></p></blockquote><ol start="5"><li>编辑好之后,另存为,设置如图所示<br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsNewAddMD/reg_to_txt.png" alt="reg_to_txt"><blockquote><p>文件名可以随便设置，但是后缀必须是<code>.reg</code>文件,保存类型一定要是<code>文本文档(*.txt)</code></p></blockquote></li></ol><h2 id="编辑新建图标-可选"><a href="#编辑新建图标-可选" class="headerlink" title="编辑新建图标(可选)"></a>编辑新建图标(可选)</h2><ol><li> 以<code>Typora</code>为例,在注册表<code>Typora.exe</code>下点击项<code>DefaultIcon</code>,右键修改</li><li>将属性修改为想要设置的 <code>Markdown</code>文件图标<br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsNewAddMD/choose_new_ico.png" alt="choose_new_ico"></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;windows-下右键新建-md-文件&quot;&gt;&lt;a href=&quot;#windows-下右键新建-md-文件&quot; class=&quot;headerlink&quot; title=&quot;windows 下右键新建.md 文件&quot;&gt;&lt;/a&gt;windows 下右键新建.md 文件&lt;/h1&gt;&lt;p&gt;原本</summary>
      
    
    
    
    <category term="经验分享" scheme="https://www.islu.cn/categories/experiences/"/>
    
    
    <category term="Markdown" scheme="https://www.islu.cn/tags/Markdown/"/>
    
    <category term="Windows" scheme="https://www.islu.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Matery添加暗色模式</title>
    <link href="https://www.islu.cn/posts/MateryAddDark.html"/>
    <id>https://www.islu.cn/posts/MateryAddDark.html</id>
    <published>2021-08-11T09:28:31.000Z</published>
    <updated>2023-12-01T13:23:36.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="制作深色模式按钮"><a href="#制作深色模式按钮" class="headerlink" title="制作深色模式按钮"></a>制作深色模式按钮</h2><h3 id="添加按钮"><a href="#添加按钮" class="headerlink" title="添加按钮"></a>添加按钮</h3><p>在主题的<code>layout.ejs</code>文件中找到 body 标签的开始标签在后面加上这些 js 和 html 代码，这里我放的位置为：<code>/layout/_partial/back-top.ejs</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 回到顶部按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;backTop&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top-scroll&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn-floating btn-large waves-effect waves-light&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#!&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-arrow-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 回到顶部按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;backTop&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top-scroll&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn-floating btn-large waves-effect waves-light&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#!&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-arrow-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">&quot;switchNightMode()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sma&quot;</span> <span class="attr">title</span>=<span class="string">&quot;模式切换&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-moon-o&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nightMode&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="按钮的-css-样式"><a href="#按钮的-css-样式" class="headerlink" title="按钮的 css 样式"></a>按钮的 css 样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 深色模式按钮设置 */</span></span><br><span class="line"><span class="selector-id">#sma</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">38px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">38px</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">170px</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">998</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sma</span> <span class="selector-class">.fa-moon-o</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.48rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sma</span> <span class="selector-class">.fa-lightbulb-o</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fa-moon-o</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\f186&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fa-comments</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\f086&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按钮的-js-代码"><a href="#按钮的-js-代码" class="headerlink" title="按钮的 js 代码"></a>按钮的 js 代码</h3><p>放在独立的 js 文件里即可，这里我放在<code>/souce/js/matery.js</code>里面</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 深色模式按钮设置 */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;dark&quot;</span>) === <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;dark&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/*定时开启暗色模式&lt;默认晚22点至早6点默认开启&gt;*/</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getHours</span>() &gt;= <span class="number">22</span> || <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getHours</span>() &lt; <span class="number">6</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;dark&quot;</span>);</span><br><span class="line">    $(<span class="string">&quot;#nightMode&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;fa-moon-o&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;fa-lightbulb&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">matchMedia</span>(<span class="string">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class="property">matches</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;dark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*提醒开启功能*/</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getHours</span>() &gt;= <span class="number">19</span> || <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getHours</span>() &lt; <span class="number">7</span>) &amp;&amp;</span><br><span class="line">    !$(<span class="string">&quot;body&quot;</span>).<span class="title function_">hasClass</span>(<span class="string">&quot;DarkMode&quot;</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">let</span> toastHTML =</span><br><span class="line">      <span class="string">&#x27;&lt;span style=&quot;color:#97b8b2;border-radius: 10px;&gt;&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;&lt;i class=&quot;fa fa-bell&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;晚上使用深色模式阅读更好哦。(ﾟ▽ﾟ)/&lt;/span&gt;&#x27;</span>;</span><br><span class="line">    M.<span class="title function_">toast</span>(&#123; <span class="attr">html</span>: toastHTML &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">2200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 深色模式设置*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">switchNightMode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span> (body.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;dark&quot;</span>)) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;dark&quot;</span>);</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;dark&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    $(<span class="string">&quot;#nightMode&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;fa-lightbulb&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;fa-moon-o&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;dark&quot;</span>);</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;dark&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    $(<span class="string">&quot;#nightMode&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;fa-moon-o&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;fa-lightbulb&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引入-CSS-暗色文件"><a href="#引入-CSS-暗色文件" class="headerlink" title="引入 CSS 暗色文件"></a>引入 CSS 暗色文件</h2><p>创建 css 文件并引入</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*暗色模式按钮样式*/</span></span><br><span class="line"><span class="selector-id">#sma</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">#aaa</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">38px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">38px</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">998</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sma</span> <span class="selector-class">.fa-moon-o</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.48rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sma</span> <span class="selector-class">.fa-lightbulb</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">11px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fa-moon-o</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\f186&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fa-comments</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\f086&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 背景颜色变灰色 */</span></span><br><span class="line"><span class="selector-class">.dark</span> <span class="selector-tag">tbody</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-id">#artDetail</span> <span class="selector-class">.post-info</span> <span class="selector-class">.post-date</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-id">#info_user_pool</span> <span class="selector-class">.moments_chart</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.bg-cover</span> <span class="selector-class">.post-title</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.biaotis</span> <span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.card</span> <span class="selector-class">.card-content</span> <span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.card</span> <span class="selector-class">.card-image</span> <span class="selector-class">.card-title</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.card</span> <span class="selector-class">.toc-title</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.card-content</span> <span class="selector-class">.categories-title</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.card-content</span> <span class="selector-class">.de</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.category-content</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.chip-container</span> <span class="selector-class">.tag-title</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.fa-lightbulb</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.fa-moon-o</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.fab</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.fas</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.friends-container</span> <span class="selector-class">.tag-title</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.frind-ship</span> <span class="selector-class">.title</span> <span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.moments-item-info</span> <span class="selector-class">.moments-item-time</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.moments_load_button</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.notice</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.panel-info</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.post-info</span> <span class="selector-class">.info-break-policy</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.publish-info</span> <span class="selector-class">.post-category</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.publish-info</span> <span class="selector-class">.publish-date</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.row</span> <span class="selector-class">.text</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.statis</span> <span class="selector-class">.name</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.supervise_details</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.title</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.v</span><span class="selector-attr">[data-class=<span class="string">&quot;v&quot;</span>]</span> <span class="selector-class">.vcount</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.v</span><span class="selector-attr">[data-class=<span class="string">&quot;v&quot;</span>]</span> <span class="selector-class">.vcount</span> <span class="selector-class">.vnum</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.valine-card</span> <span class="selector-class">.comment_headling</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">a</span> <span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">table</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">article</span> <span class="selector-class">.article-content</span> <span class="selector-class">.summary</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">article</span> <span class="selector-class">.article-tags</span> <span class="selector-class">.chip</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">div</span><span class="selector-class">.jqcloud</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">footer</span> <span class="selector-class">.copy-right</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">footer</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">header</span> <span class="selector-class">.side-nav</span> <span class="selector-class">.menu-list</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">header</span> <span class="selector-class">.side-nav</span> <span class="selector-class">.mobile-head</span> <span class="selector-class">.logo-desc</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">header</span> <span class="selector-class">.side-nav</span> <span class="selector-class">.mobile-head</span> <span class="selector-class">.logo-name</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> pre <span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.85</span>); <span class="comment">/*.85为透明度，可依据需求修改*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 背景颜色变黑色 */</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-id">#rewardModal</span> <span class="selector-class">.modal-content</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.archive-container</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.modal</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.v</span><span class="selector-attr">[data-class=<span class="string">&quot;v&quot;</span>]</span> <span class="selector-class">.vcount</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">header</span> <span class="selector-class">.side-nav</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">header</span> <span class="selector-class">.side-nav</span> <span class="selector-class">.menu-list</span> <span class="selector-class">.m-nav-show</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#12121c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*首页文章滑动卡片文字*/</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-id">#thisTime</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.card-image-V</span> <span class="selector-class">.box-content</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#8a2be2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*音乐播放器*/</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.aplayer</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#2f3742</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*图片滤镜*/</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*统计图表暗色样式*/</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-id">#categories-chart</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-id">#category-radar</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-id">#post-calendar</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-id">#posts-chart</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-id">#tags-chart</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">invert</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*toc目录滤镜*/</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.skillbar</span> <span class="selector-class">.skill-bar-percent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*加载动画（吃豆豆）文字颜色*/</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.loading-text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*一些细节背景*/</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.block-with-text</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.card</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.collapsible-header</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.wxgzh</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n),</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">thead</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#282c34</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*about页面细节*/</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.profile</span> <span class="selector-class">.author</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#faebd7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.my-projects</span> <span class="selector-class">.info</span> <span class="selector-class">.info-title</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: tomato;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*外挂标签*/</span></span><br><span class="line"><span class="selector-class">.swbk</span> <span class="selector-class">.label</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: currentColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何修改部分细节冲突"><a href="#如何修改部分细节冲突" class="headerlink" title="如何修改部分细节冲突"></a>如何修改部分细节冲突</h2><p>此暗黑模式原理为在 <code>&lt;body&gt;</code> 标签添加 <code>class=&quot;dark&quot;</code></p><p>添加暗色模式时可依据 <code>body.dark 类名</code> 用 CSS 选择器来给含有<code>dark</code> 的 <code>&lt;body&gt;</code> 下的类添加属性</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*给暗黑模式下的.test添加字体颜色变红样式*/</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如若冲突可考虑 <code>!important</code> 来添加”权重”</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;制作深色模式按钮&quot;&gt;&lt;a href=&quot;#制作深色模式按钮&quot; class=&quot;headerlink&quot; title=&quot;制作深色模式按钮&quot;&gt;&lt;/a&gt;制作深色模式按钮&lt;/h2&gt;&lt;h3 id=&quot;添加按钮&quot;&gt;&lt;a href=&quot;#添加按钮&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="经验分享" scheme="https://www.islu.cn/categories/experiences/"/>
    
    
    <category term="Hexo" scheme="https://www.islu.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell运行hexo命令</title>
    <link href="https://www.islu.cn/posts/WindowsPowerShellOperationHexo.html"/>
    <id>https://www.islu.cn/posts/WindowsPowerShellOperationHexo.html</id>
    <published>2021-08-03T23:00:02.000Z</published>
    <updated>2023-12-01T13:23:36.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-PowerShell-运行-hexo-命令"><a href="#Windows-PowerShell-运行-hexo-命令" class="headerlink" title="Windows PowerShell 运行 hexo 命令"></a>Windows PowerShell 运行 hexo 命令</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个月前更新了 Windows11，在桌面右键可以直接开启 <code>Windows PowerShell</code> 便在安装 <code>git</code> 时没有选择在右键快捷打开的配置，便有了这篇水文</p><p>在新系统上装了 hexo 环境，可打开系统默认的 <code>Windows PowerShell</code> 运行命令却无法识别，以为是系统环境变量没设置好。可在 <code>Git bash</code> 和 <code>CMD</code> 终端却可以执行，再仔细看 <code>Windows PowerShell</code> 中的提示，原来是提示的无法加载文件，因此在此系统上禁止运行脚本。</p><h2 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h2><p>安装好 <code>npm</code> 和 <code>hexo</code> 后，在 <code>Windows PowerShell</code> 终端运行 <code>npm version</code> 没问题，运行 <code>hexo version</code> 则提示如下：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo : 无法加载文件 C:\Users\username\AppData\Roaming\npm\hexo.ps1`，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=<span class="number">135170</span> 中的 `about_Execution_Policies`。</span><br><span class="line">所在位置 行:<span class="number">1</span> 字符: <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>此时，在 <code>CMD</code> 中执行以上命令都没问题，所以不是系统环境变量的问题。</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>用管理员权限打开 <code>Windows PowerShell</code>  ，运行以下命令：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> UNRESTRICTED</span><br></pre></td></tr></table></figure><p>在提示中输入 <code>Y</code> 即可(安全警示，如果不输入同意还是无法解决问题)</p><blockquote><p>随后便可直接右键选择 <code>Windows PowerShell</code> 运行 hexo 命令了 ( : 记得要用 <code>cd</code> 跳转到你的文件夹目录哦~</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windows-PowerShell-运行-hexo-命令&quot;&gt;&lt;a href=&quot;#Windows-PowerShell-运行-hexo-命令&quot; class=&quot;headerlink&quot; title=&quot;Windows PowerShell 运行 hexo 命令&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="经验分享" scheme="https://www.islu.cn/categories/experiences/"/>
    
    
    <category term="Hexo" scheme="https://www.islu.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Maven课堂笔记</title>
    <link href="https://www.islu.cn/posts/Maven.html"/>
    <id>https://www.islu.cn/posts/Maven.html</id>
    <published>2021-06-05T23:14:58.000Z</published>
    <updated>2023-12-01T13:23:36.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Apache Maven 是一个软件项目管理和依赖管理工具。基于项目对象模型 (POM：Project Object Model) 的概念，Maven 可以从一个中心信息块管理项目的构建、报告和文档。</p><p>无论是小型的开源类库项目，还是大型的企业级应用;无论是传统的瀑布式开发，还是流行的敏捷开发，Maven 都能大显身手。</p><blockquote><p>官方网址</p></blockquote><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://maven.apache.org/</span><br></pre></td></tr></table></figure><h4 id="核心功能【重点】"><a href="#核心功能【重点】" class="headerlink" title="核心功能【重点】"></a>核心功能【重点】</h4><blockquote><ol><li>依赖管理（依赖管理指的就是使用 Maven 来管理项目中使用到的 jar 包，Maven 管理的方式就是“自动下载项目所需要的 jar 包，统一管理 jar 包之间的依赖关系)</li><li>项目构建（清理、编译、单元测试、打包、安装、部署、运行）</li><li>约定大于配置，解决不同的 ide 文件目录不一致的问题</li></ol></blockquote><h3 id="Maven-环境配置"><a href="#Maven-环境配置" class="headerlink" title="Maven 环境配置"></a>Maven 环境配置</h3><h4 id="下载-Maven"><a href="#下载-Maven" class="headerlink" title="下载 Maven"></a>下载 Maven</h4><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://maven.apache.org/download.cgi</span><br></pre></td></tr></table></figure><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/apache-maven_download.png" alt="apache-maven_download"></p><h4 id="Maven-库目录"><a href="#Maven-库目录" class="headerlink" title="Maven 库目录"></a>Maven 库目录</h4><blockquote><p>【注意】不要在中文路径下解压</p></blockquote><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td>bin</td><td>包含 mvn 的一些可执行程序</td></tr><tr><td>boot</td><td>包含 plexus-classworlds 类加载器的框架</td></tr><tr><td>config</td><td>包含 settings.xml 在内的配置文件</td></tr><tr><td>lib</td><td>Maven 运行时所需要的 Java 类库</td></tr><tr><td>LICENSE.txt、NOTICE.txt、README.txt</td><td>简要介绍</td></tr></tbody></table><h4 id="配置-Maven-环境变量"><a href="#配置-Maven-环境变量" class="headerlink" title="配置 Maven 环境变量"></a>配置 Maven 环境变量</h4><p>1、此电脑[右键] –&gt; 属性</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/computer_nature.png" alt="computer_nature"></p><p>2、选择高级系统设置</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/computer_AdvancedSystemSettings.png" alt="computer_AdvancedSystemSettings"></p><p>3、选择高级下面的环境变量</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/computer_environmentVariable.png" alt="computer_environmentVariable"></p><p>4、找到系统变量下的 Path</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/computer_Path.png" alt="computer_Path"></p><p>5、将 Maven 的 bin 目录添加到环境变量中，点击确定</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/computer_Bin.png" alt="computer_Bin"></p><p>6、一路确定即可</p><h4 id="配置-Maven-仓库"><a href="#配置-Maven-仓库" class="headerlink" title="配置 Maven 仓库"></a>配置 Maven 仓库</h4><p>Maven 使用仓库管理各种 jar 包和插件。</p><p>Maven 仓库分为：本地仓库（local）、远程仓库（remote）两大类</p><h5 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h5><blockquote><p>本地电脑中的仓库。默认位置为：</p><p>【注意】一般需要修改此位置为非 C 盘</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;user:home&#125;/.m2/repository</span><br></pre></td></tr></table></figure><h5 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h5><p>远程仓库又包括：中央仓库 + 私服 + 其它公共远程仓库 （比如阿里、163 等）</p><h6 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h6><p>中央仓库是 maven 自带的远程仓库，默认地址：<a href="https://repo.maven.apache.org/maven2%EF%BC%8C%E7%94%B1%E4%BA%8E%E9%BB%98%E8%AE%A4%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%A8%E5%9B%BD%E5%A4%96%EF%BC%8C%E4%B8%8B%E8%BD%BD%E4%BC%9A%E6%AF%94%E8%BE%83%E6%85%A2%EF%BC%8C%E4%B8%80%E8%88%AC%E9%9C%80%E8%A6%81%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E7%9A%84%E5%85%AC%E5%85%B1%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%BD%9C%E4%B8%BA%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93%E9%95%9C%E5%83%8F%E3%80%82%E6%B3%A8%E6%84%8F%E9%85%8D%E7%BD%AE%E4%BA%86%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93%E9%95%9C%E5%83%8F%E5%B0%B1%E4%B8%8D%E5%86%8D%E8%B5%B0%E9%BB%98%E8%AE%A4%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93%E3%80%82%E3%80%82">https://repo.maven.apache.org/maven2，由于默认中央仓库的服务器在国外，下载会比较慢，一般需要配置使用国内的公共远程仓库作为中央仓库镜像。注意配置了中央仓库镜像就不再走默认中央仓库。。</a></p><h6 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h6><p>私服是架设在本机或者局域网中的一种特殊的远程仓库，通过私服可以方便的管理其它所有的外部远程仓库。</p><ul><li>节省自己的外网带宽</li><li>加速 maven 构建</li><li>部署第三方控件</li><li>提高稳定性</li><li>降低中央仓库的负荷</li></ul><h5 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h5><p>在 maven 的 conf 目录中找到 settings.xml 文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一个位置在根节点settings下添加本地仓库位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>F:/m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二个位置，在mirrors节点下添加 中央仓库镜像--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第三个位置，在 profiles 节点下添加 jdk 版本全局配置，因为默认为1.5--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>检索顺序：先检索本地仓库 –&gt; 再检索远程公共仓库 –&gt; 最后检索中央仓库</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/maven_pomPush.png" alt="maven_pomPush"></p><h3 id="Maven-入门"><a href="#Maven-入门" class="headerlink" title="Maven 入门"></a>Maven 入门</h3><h4 id="Maven-程序目录结构"><a href="#Maven-程序目录结构" class="headerlink" title="Maven 程序目录结构"></a>Maven 程序目录结构</h4><blockquote><p>约定大于配置：能使用约定好的方式，就不要配置。</p></blockquote><h5 id="手动创建目录结构："><a href="#手动创建目录结构：" class="headerlink" title="手动创建目录结构："></a>手动创建目录结构：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maven_project_name</span><br><span class="line">--src</span><br><span class="line">--main</span><br><span class="line">--java</span><br><span class="line">--com</span><br><span class="line">--fc</span><br><span class="line">Hello.java</span><br><span class="line">--resources</span><br><span class="line">--webapp</span><br><span class="line">--WEB-INF</span><br><span class="line">--web.xml</span><br><span class="line">--test</span><br><span class="line">--pom.xml</span><br></pre></td></tr></table></figure><p>目录说明</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>maven_project_name</td><td>maven 项目名</td></tr><tr><td>src</td><td>java 源文件目录</td></tr><tr><td>main</td><td>项目主体目录</td></tr><tr><td>java</td><td>源代码目录</td></tr><tr><td>resources</td><td>资源目录</td></tr><tr><td>webapp</td><td>web 项目目录</td></tr><tr><td>test</td><td>项目测试目录</td></tr><tr><td>pom.xml</td><td>maven 项目核心配置文件</td></tr></tbody></table><p>pom.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;https://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组织id：公司名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目名或者模块名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testmaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包形式 jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用命令创建（了解）"><a href="#使用命令创建（了解）" class="headerlink" title="使用命令创建（了解）"></a>使用命令创建（了解）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId=com.qf.maven -DartifactId=maven02 -DinteractiveMode=false -DarchetypeCatalog=internal</span><br></pre></td></tr></table></figure><h4 id="Maven-常见命令"><a href="#Maven-常见命令" class="headerlink" title="Maven 常见命令"></a>Maven 常见命令</h4><p>Maven 的另一个核心功能是项目构建。</p><p>构建包括：清理、编译、测试、打包、安装、部署、运行等。这些过程都可以使用 Maven 命令来完成。</p><p>每个 maven 命令都可以通过对应的插件来完成。</p><h5 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 清理（删除）编译的文件</span><br><span class="line">mvn clean</span><br></pre></td></tr></table></figure><blockquote><p>使用插件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maven-clean-plugin:2.5:clean</span><br></pre></td></tr></table></figure><h5 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 编译主目录的文件</span><br><span class="line">mvn compile</span><br></pre></td></tr></table></figure><blockquote><p>使用插件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maven-resources-plugin:2.6:resources</span><br><span class="line">maven-compiler-plugin:3.1:compile</span><br></pre></td></tr></table></figure><h5 id="test"><a href="#test" class="headerlink" title="test"></a>test</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 编译并运行test目录的代码</span><br><span class="line">mvn test</span><br></pre></td></tr></table></figure><blockquote><p>使用插件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maven-resources-plugin:2.6:resources</span><br><span class="line">maven-compiler-plugin:3.1:compile</span><br><span class="line">maven-resources-plugin:2.6:testResources</span><br><span class="line">maven-compiler-plugin:3.1:testCompile</span><br><span class="line">maven-surefire-plugin:2.12.4:test</span><br></pre></td></tr></table></figure><h5 id="package"><a href="#package" class="headerlink" title="package"></a>package</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 打包项目,jar包或war包</span><br><span class="line">mvn package</span><br></pre></td></tr></table></figure><blockquote><p>使用插件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maven-resources-plugin:2.6:resources</span><br><span class="line">maven-compiler-plugin:3.1:compile</span><br><span class="line">maven-resources-plugin:2.6:testResources</span><br><span class="line">maven-compiler-plugin:3.1:testCompile</span><br><span class="line">maven-surefire-plugin:2.12.4:test</span><br><span class="line">maven-jar-plugin:2.4:jar</span><br></pre></td></tr></table></figure><h5 id="install"><a href="#install" class="headerlink" title="install"></a>install</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 安装到仓库</span><br><span class="line">mvn install</span><br></pre></td></tr></table></figure><blockquote><p>使用插件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maven-resources-plugin:2.6:resources</span><br><span class="line">maven-compiler-plugin:3.1:compile</span><br><span class="line">maven-resources-plugin:2.6:testResources</span><br><span class="line">maven-compiler-plugin:3.1:testCompile</span><br><span class="line">maven-surefire-plugin:2.12.4:test</span><br><span class="line">maven-jar-plugin:2.4:jar</span><br><span class="line">maven-install-plugin:2.4:install</span><br></pre></td></tr></table></figure><h5 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 部署，部署到私服</span><br><span class="line">mvn deploy</span><br><span class="line"></span><br><span class="line">// 运行</span><br><span class="line">mvn tomcat:run</span><br></pre></td></tr></table></figure><h4 id="Maven-构建生命周期"><a href="#Maven-构建生命周期" class="headerlink" title="Maven 构建生命周期"></a>Maven 构建生命周期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Clean：项目构建前的清理操作</span><br><span class="line">2. Default（Build）：核心生命周期核心过程：编译，测试，运行，打包等等</span><br><span class="line">3. Site：项目站点文档创建。</span><br></pre></td></tr></table></figure><h4 id="Maven-POM-文件"><a href="#Maven-POM-文件" class="headerlink" title="Maven POM 文件"></a>Maven POM 文件</h4><blockquote><p>POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元。pom.xml 是 Maven 的核心配置文件，包含了项目的基本信息，用于描述项目如何构建，声明项目的 jar 包依赖等等。</p><p>每一个项目都有一个 POM 文件。POM 文件即 pom.xml，应该放在项目的根目录下。一个项目如果分为多个子项目，一般来讲，父项目有一个 POM 文件，每一个子项目都有一个 POM 文件。在这种结构下，既可以一步构建整个项目，也可以各个子项目分开构建。</p><p>执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。</p><p>POM 中可以指定以下配置：</p><ul><li>项目依赖</li><li>插件</li><li>执行目标</li><li>项目构建 profile</li><li>项目版本</li><li>项目开发者列表</li><li>相关邮件列表信息</li></ul></blockquote><p>基本的 pom.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;https://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组织id：公司名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目名或者模块名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testmaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包形式 jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】所有 POM 文件都需要 project 元素和三个必需的标签：groupId，artifactId，version。这个必须元素叫做坐标（GAV）</p></blockquote><h4 id="Maven-引入外部依赖"><a href="#Maven-引入外部依赖" class="headerlink" title="Maven 引入外部依赖"></a>Maven 引入外部依赖</h4><blockquote><p>Maven 仓库</p></blockquote><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://mvnrepository.com/</span><br></pre></td></tr></table></figure><p>引入多个依赖只需在 dependencies 标签下声明对应的 dependency 标签即可</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】Scope 依赖范围：</p><ul><li>compile（编译范围） compile 是默认的范围，会被打包。</li><li>provided（已提供范围） provided 依赖只有在当 JDK 或者一个容器已提供该依赖之后才使用。它们不是传递性的，也不会被打包。</li><li>runtime（运行时范围） runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。</li><li>test（测试范围）只有在测试编译和测试运行阶段可用。</li><li>system（系统范围）必须显式的提供一个对于本地系统中 JAR 文件的路径。注意该范围是不推荐使用。</li></ul></blockquote><h3 id="使用开发工具创建-Maven-项目"><a href="#使用开发工具创建-Maven-项目" class="headerlink" title="使用开发工具创建 Maven 项目"></a>使用开发工具创建 Maven 项目</h3><h4 id="Eclipse-配置-Maven（了解）"><a href="#Eclipse-配置-Maven（了解）" class="headerlink" title="Eclipse 配置 Maven（了解）"></a>Eclipse 配置 Maven（了解）</h4><ol><li>安装插件<br> Eclipse 使用 Maven 的前提要安装 m2e 插件，目前 Eclipse 已集成，不需要安装。</li><li>配置 Maven<br> 1、进入首选项<br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/preferences.png" alt="preferences"><br> 2、添加 Maven 仓库<br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/add_maven.png" alt="add_maven"><br> 3、配置 Maven<br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/set_maven.png" alt="set_maven"><br> 4、配置 xml 文件<br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/set_xml.png" alt="set_xml"></li><li>Eclipse 创建 Maven 工程<br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/create_maven.png" alt="create_maven"><br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/create_set_maven.png" alt="create_set_maven"></li></ol><h4 id="Idea-配置-Maven"><a href="#Idea-配置-Maven" class="headerlink" title="Idea 配置 Maven"></a>Idea 配置 Maven</h4><ol><li>安装插件<br> Idea 自带 Maven 插件，不需要安装</li><li>配置 Maven<br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/setting_maven.png" alt="setting_maven"><br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/setting_maven_repo.png" alt="setting_maven_repo"><br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/down_doc.png" alt="down_doc"></li><li>Idea 创建 Maven 工程<br> 1、创建项目<br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/create_project.png" alt="create_project"><br> 2、选择 Maven<br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/choose_maven.png" alt="choose_maven"><br> 3、声明项目名<br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/setting_project_name.png" alt="setting_project_name"><br> 4、选择项目的存放路径<br> <img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/setting_path.png" alt="setting_path"><blockquote><p>【注意】这里不要使用骨架！</p></blockquote></li></ol><h3 id="在-Maven-项目中使用-Web-组件"><a href="#在-Maven-项目中使用-Web-组件" class="headerlink" title="在 Maven 项目中使用 Web 组件"></a>在 Maven 项目中使用 Web 组件</h3><p>1、选中 main</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/choose_main.png" alt="choose_main"></p><p>2、点击打开文件下的项目架构</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/project_structure.png" alt="project_structure"></p><p>3、选择模板，添加 Web 组件</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/add_web.png" alt="add_web"></p><p>4、修改部署路径</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/update_path.png" alt="update_path"></p><p>5、注意此路径为 web.xml 的存放路径</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/notice_web_path.png" alt="notice_web_path"></p><p>6、将 web.xml 的路径放在项目下的 src 下的 main 下的 webapp 下的 WEB-INF 下即可</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/update_web_path.png" alt="update_web_path"></p><p>7、点击编辑 Web 资源路径</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/edit_web_path.png" alt="edit_web_path"></p><p>8、选择目录</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/choose_modules.png" alt="choose_modules"></p><p>9、选择 main 下面的 webapp 目录</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/choose_main_modules.png" alt="choose_main_modules"></p><p>10、点击 OK</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/choose_ok.png" alt="choose_ok"></p><p>11、打开 pom.xml 文件并添加打包方式为 war</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/add_package_war.png" alt="add_package_war"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>12、添加 Servlet-api 的 jar 包依赖</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/add_servlet-api_jar.png" alt="add_servlet-api_jar"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明此jar包的作用域为编译期--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】必须声明作用域，否则会报错！</p></blockquote><p>13、添加 Tomcat 插件</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/add_tomcat.png" alt="add_tomcat"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加Tomcat插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Tomcat相关配置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--编码集--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--访问路径--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/testMaven<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】此方法使用 Maven 自带 Tomcat 插件，也可以使用本地 Tomcat</p></blockquote><p>14、启动 Tomcat 服务器</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/start_tomcat.png" alt="start_tomcat"></p><blockquote><p>【注意】不要反复启动 Tomcat 服务器</p></blockquote><h3 id="Maven-Web-项目结构"><a href="#Maven-Web-项目结构" class="headerlink" title="Maven Web 项目结构"></a>Maven Web 项目结构</h3><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/maven_web_moudles.png" alt="maven_web_moudles"></p><h3 id="Maven-操作"><a href="#Maven-操作" class="headerlink" title="Maven 操作"></a>Maven 操作</h3><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="Maven/maven_do.png" alt="maven_do"></p><h3 id="pom-xml-配置文件【重点】"><a href="#pom-xml-配置文件【重点】" class="headerlink" title="pom.xml 配置文件【重点】"></a>pom.xml 配置文件【重点】</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;https://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--因为是web项目，所以打包方式声明为war--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加jar包依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Servlet-api--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--声明此jar包的作用域为编译期--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--添加Tomcat插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--Tomcat相关配置--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--端口--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--编码集--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--访问路径--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/testMaven<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--需要设置打包的文件 特别是非java文件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】使用时直接复制粘贴，修改 groupId、artifactId、path 等参数即可</p></blockquote><h3 id="Maven-相关命令【了解】"><a href="#Maven-相关命令【了解】" class="headerlink" title="Maven 相关命令【了解】"></a>Maven 相关命令【了解】</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>mvn version</td><td>显示当前版本信息</td></tr><tr><td>mvn compile</td><td>编译源代码</td></tr><tr><td>mvn test-compile</td><td>编译测试代码</td></tr><tr><td>mvn test</td><td>运行测试</td></tr><tr><td>mvn site</td><td>生成 site</td></tr><tr><td>mvn eclipse:eclipse</td><td>生成 eclipse 项目</td></tr><tr><td>mvn idea:idea</td><td>生成 idea 项目</td></tr><tr><td>mvn clean</td><td>清除产生的项目</td></tr><tr><td>mvn package</td><td>打包</td></tr><tr><td>mvn jar:jar</td><td>只打 jar 包</td></tr><tr><td>mvn source:jar</td><td>源码打包</td></tr><tr><td>mvn tomcat7:run</td><td>在 tomcat 容器中运行 web 应用</td></tr><tr><td>mvn jetty:run</td><td>调用 Jetty 插件的 Run 目标在 Jetty Servlet 容器中启动 web 应用</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.islu.cn/categories/notes/"/>
    
    
    <category term="Maven" scheme="https://www.islu.cn/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯-七星填数</title>
    <link href="https://www.islu.cn/posts/SevenStarsFillNumber.html"/>
    <id>https://www.islu.cn/posts/SevenStarsFillNumber.html</id>
    <published>2021-06-01T16:58:53.000Z</published>
    <updated>2023-12-01T13:23:36.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>如图所示。<br>在七角星的 14 个节点上填入 1~14 的数字，不重复，不遗漏.要求每条直线上的四个数字之和必须相等。<br>图中已经给出了 3 个数字。<br>请计算其它位置要填充的数字，答案唯一。<br>填好后，请提交绿色节点的 4 个数字（从左到右，用空格分开)<br>比如: 12 5 4 8<br>当然，这不是正确的答案</p><p>只提交 4 个用空格分开的数字，不要填写任何多余的内容。</p><blockquote><p>答案：<code>10 3 9 8</code></p></blockquote><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsPowerShellOperationHexo/eg.png" alt="eg"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如图：</p><p><img src="/media/detail/loading.svg" data-aos="zoom-in"  data-img="WindowsPowerShellOperationHexo/thinking.png" alt="thinking"></p><blockquote><p>新建数组用于存放未知数字，红色为下表编号</p><p>通过全排列将 1-14 未使用的依次放入数组中</p><p>判断是否满足七边之和相等</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// a[0]==6 &amp;&amp;a[8]==14&amp;&amp; a[9]==11</span></span><br><span class="line"><span class="type">int</span>[] num = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">13</span> &#125;;</span><br><span class="line">dfs(num, <span class="number">0</span>, num.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//全排列</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] num, <span class="type">int</span> p, <span class="type">int</span> q)</span> &#123;</span><br><span class="line">       <span class="comment">//满足排列和七边之和相等</span></span><br><span class="line"><span class="keyword">if</span> (p == q &amp;&amp; flag(num)) &#123;</span><br><span class="line">System.out.print(num[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + num[<span class="number">1</span>] + <span class="string">&quot; &quot;</span> + num[<span class="number">2</span>] + <span class="string">&quot; &quot;</span> + num[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> p; i &lt;= q; i++) &#123;</span><br><span class="line">swap(num, p, i);</span><br><span class="line">dfs(num, p + <span class="number">1</span>, q);</span><br><span class="line">swap(num, p, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 两数交换 a[0]=0,a[1]=1======&gt;&gt;a[0]=1,a[1]=0</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] num, <span class="type">int</span> p, <span class="type">int</span> i)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num[p];</span><br><span class="line">num[p] = num[i];</span><br><span class="line">num[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否满足条件（七边之和相等）</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">flag</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> sum(a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum1</span> <span class="operator">=</span> sum(a[<span class="number">0</span>], a[<span class="number">4</span>], a[<span class="number">6</span>], a[<span class="number">9</span>]);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> sum(a[<span class="number">9</span>], a[<span class="number">8</span>], a[<span class="number">7</span>], <span class="number">11</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum3</span> <span class="operator">=</span> sum(<span class="number">6</span>, a[<span class="number">2</span>], a[<span class="number">5</span>], <span class="number">11</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum4</span> <span class="operator">=</span> sum(<span class="number">6</span>, a[<span class="number">1</span>], a[<span class="number">4</span>], <span class="number">14</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum5</span> <span class="operator">=</span> sum(<span class="number">14</span>, a[<span class="number">6</span>], a[<span class="number">8</span>], a[<span class="number">10</span>]);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum6</span> <span class="operator">=</span> sum(a[<span class="number">10</span>], a[<span class="number">7</span>], a[<span class="number">5</span>], a[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sum == sum1 &amp;&amp; sum1 == sum2 &amp;&amp; sum2 == sum3 &amp;&amp; sum3 == sum4 &amp;&amp; sum4 == sum5 &amp;&amp; sum5 == sum6;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回四数之和</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c + d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;如图所示。&lt;br&gt;在七角星的 14 个节点上填入 1~14 的数字，不重复，不遗漏.要求每条直线上的四个数字之和必须相等。&lt;br&gt;图中已经给</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.islu.cn/categories/notes/"/>
    
    
    <category term="Coding" scheme="https://www.islu.cn/tags/Coding/"/>
    
  </entry>
  
</feed>
